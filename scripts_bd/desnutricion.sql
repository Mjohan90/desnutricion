--
-- Script was generated by Devart dbForge Studio for MySQL, Version 7.1.31.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 07/11/2019 05:16:50 p.m.
-- Server version: 5.5.5-10.1.21-MariaDB
-- Client version: 4.1
--


/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

SET NAMES 'utf8';

CREATE TABLE cargo (
  carg_id INT(11) NOT NULL AUTO_INCREMENT,
  carg_nombre VARCHAR(50) NOT NULL,
  carg_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (carg_id),
  UNIQUE INDEX uk_cargo_nombre (carg_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE categvariable (
  catvar_id INT(11) NOT NULL AUTO_INCREMENT,
  catvar_nombre VARCHAR(50) NOT NULL,
  catvar_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (catvar_id)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE diagnostico (
  diag_id INT(11) NOT NULL AUTO_INCREMENT,
  diag_nombre VARCHAR(50) NOT NULL,
  diag_tratamiento_sug VARCHAR(500) NOT NULL,
  diag_dieta_sug VARCHAR(500) NOT NULL,
  diag_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (diag_id),
  UNIQUE INDEX uk_diag_nombre (diag_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE especialidad (
  espec_id INT(11) NOT NULL AUTO_INCREMENT,
  espec_nombre VARCHAR(50) NOT NULL,
  espec_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (espec_id),
  UNIQUE INDEX uk_espec_nombre (espec_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE indicador (
  indic_id INT(11) NOT NULL AUTO_INCREMENT,
  indic_nombre VARCHAR(50) NOT NULL,
  indic_var1_id INT(11) NOT NULL,
  indic_var2_id INT(11) NOT NULL,
  indic_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (indic_id),
  UNIQUE INDEX uk_indic_nombre (indic_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE rol (
  rol_id INT(11) NOT NULL AUTO_INCREMENT,
  rol_nombre VARCHAR(50) NOT NULL,
  rol_fecha_reg DATETIME NOT NULL,
  rol_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (rol_id),
  UNIQUE INDEX uk_rol_nombre (rol_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE tipodocident (
  tdi_id INT(11) NOT NULL AUTO_INCREMENT,
  tdi_nombre VARCHAR(50) NOT NULL,
  tdi_abrev VARCHAR(10) NOT NULL,
  tdi_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (tdi_id),
  UNIQUE INDEX uk_tdi_abrev (tdi_abrev),
  UNIQUE INDEX uk_tdi_nombre (tdi_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE tipoparentesco (
  tparent_id INT(11) NOT NULL AUTO_INCREMENT,
  tparent_nombre VARCHAR(50) NOT NULL,
  tparent_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (tparent_id),
  UNIQUE INDEX UK_tparent_nombre (tparent_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE ubigeo (
  ubig_id INT(11) NOT NULL AUTO_INCREMENT,
  ubig_cod CHAR(6) NOT NULL,
  ubig_dpto_cod INT(11) NOT NULL,
  ubig_prov_cod INT(11) NOT NULL,
  ubig_dist_cod INT(11) NOT NULL,
  ubig_nombre VARCHAR(100) NOT NULL,
  ubig_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (ubig_id),
  UNIQUE INDEX uk_ubig_cod (ubig_cod),
  UNIQUE INDEX uk_ubigeo (ubig_dpto_cod, ubig_prov_cod, ubig_dist_cod)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE um (
  um_id INT(11) NOT NULL AUTO_INCREMENT,
  um_nombre VARCHAR(50) NOT NULL,
  um_abrev VARCHAR(10) NOT NULL,
  um_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (um_id),
  UNIQUE INDEX uk_um_abrev (um_abrev),
  UNIQUE INDEX uk_um_nombre (um_nombre)
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE percentil (
  percent_id INT(11) NOT NULL AUTO_INCREMENT,
  percent_sexo CHAR(1) NOT NULL,
  percent_indic_id INT(11) NOT NULL,
  percent_var1_valor DECIMAL(9, 2) NOT NULL,
  percent_var2_valor DECIMAL(9, 2) NOT NULL,
  percent_percentil DECIMAL(9, 2) NOT NULL,
  percent_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (percent_id),
  INDEX ix_percent_sexo (percent_sexo),
  CONSTRAINT FK_percentil_indicador FOREIGN KEY (percent_indic_id)
    REFERENCES indicador(indic_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE persona (
  pers_id INT(11) NOT NULL AUTO_INCREMENT,
  pers_nombre VARCHAR(30) NOT NULL,
  pers_snombre VARCHAR(30) NOT NULL,
  pers_ap_paterno VARCHAR(30) NOT NULL,
  pers_ap_materno VARCHAR(30) NOT NULL,
  pers_tdi_id INT(11) NOT NULL,
  pers_tdi_nro VARCHAR(20) NOT NULL,
  pers_sexo CHAR(1) NOT NULL,
  pers_fecha_nac DATETIME NOT NULL,
  pers_email VARCHAR(20) NOT NULL,
  pers_celular VARCHAR(20) NOT NULL,
  pers_telefono VARCHAR(20) NOT NULL,
  pers_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (pers_id),
  INDEX IX_pers_fecha_nac (pers_fecha_nac),
  INDEX ix_pers_sexo (pers_sexo),
  UNIQUE INDEX uk_pers_tdi (pers_tdi_id, pers_tdi_nro),
  CONSTRAINT FK_persona_tipodocident FOREIGN KEY (pers_tdi_id)
    REFERENCES tipodocident(tdi_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE reglas (
  regla_id INT(11) NOT NULL AUTO_INCREMENT,
  regla_indic1_id INT(11) NOT NULL,
  regla_indic2_id INT(11) NOT NULL,
  regla_formula VARCHAR(200) NOT NULL,
  regla_diag_id INT(11) NOT NULL,
  PRIMARY KEY (regla_id),
  UNIQUE INDEX uk_regla_indic (regla_indic1_id, regla_indic2_id),
  CONSTRAINT FK_reglas_diagnostico FOREIGN KEY (regla_diag_id)
    REFERENCES diagnostico(diag_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_reglas_indicador_indic1 FOREIGN KEY (regla_indic1_id)
    REFERENCES indicador(indic_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_reglas_indicador_indic2 FOREIGN KEY (regla_indic2_id)
    REFERENCES indicador(indic_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE variable (
  var_id INT(11) NOT NULL AUTO_INCREMENT,
  var_catvar_id INT(11) NOT NULL,
  var_nombre VARCHAR(50) NOT NULL,
  var_um_id INT(11) NOT NULL,
  var_tipo_var CHAR(1) NOT NULL,
  var_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (var_id),
  INDEX ix_var_tipo_var (var_tipo_var),
  UNIQUE INDEX UK_var_nombre (var_nombre),
  CONSTRAINT FK_variable_categvariable FOREIGN KEY (var_catvar_id)
    REFERENCES categvariable(catvar_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_variable_um FOREIGN KEY (var_um_id)
    REFERENCES um(um_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE direccion (
  direc_id INT(11) NOT NULL AUTO_INCREMENT,
  direc_pers_id INT(11) NOT NULL,
  direc_ubig_id INT(11) NOT NULL,
  direc_descripcion VARCHAR(200) NOT NULL,
  direc_fecha_reg DATETIME NOT NULL,
  direc_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (direc_id),
  CONSTRAINT FK_direccion_persona FOREIGN KEY (direc_pers_id)
    REFERENCES persona(pers_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_direccion_ubigeo FOREIGN KEY (direc_ubig_id)
    REFERENCES ubigeo(ubig_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE empleado (
  empl_id INT(11) NOT NULL AUTO_INCREMENT,
  empl_pers_id INT(11) NOT NULL,
  empl_carg_id INT(11) NOT NULL,
  empl_fecha_reg DATETIME NOT NULL,
  empl_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (empl_id),
  UNIQUE INDEX uk_empl_pers_id (empl_pers_id),
  CONSTRAINT FK_empleado_cargo FOREIGN KEY (empl_carg_id)
    REFERENCES cargo(carg_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_empleado_persona FOREIGN KEY (empl_pers_id)
    REFERENCES persona(pers_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE paciente (
  pac_id INT(11) NOT NULL AUTO_INCREMENT,
  pac_pers_id INT(11) NOT NULL,
  pac_fecha_reg DATETIME NOT NULL,
  pac_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (pac_id),
  UNIQUE INDEX uk_pac_pers (pac_pers_id),
  CONSTRAINT FK_paciente_persona FOREIGN KEY (pac_pers_id)
    REFERENCES persona(pers_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE parentesco (
  parent_id INT(11) NOT NULL AUTO_INCREMENT,
  parent_pers1_id INT(11) NOT NULL,
  parent_pers2_id INT(11) NOT NULL,
  parent_tparent_id INT(11) NOT NULL,
  parent_es_apoderado TINYINT(4) UNSIGNED NOT NULL,
  parent_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (parent_id),
  UNIQUE INDEX uk_parent_pers (parent_pers1_id, parent_pers2_id),
  CONSTRAINT FK_parentesco_persona_pers1 FOREIGN KEY (parent_pers1_id)
    REFERENCES persona(pers_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_parentesco_persona_pers2 FOREIGN KEY (parent_pers2_id)
    REFERENCES persona(pers_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_parentesco_tipoparentesco FOREIGN KEY (parent_tparent_id)
    REFERENCES tipoparentesco(tparent_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE atencion (
  atenc_id INT(11) NOT NULL AUTO_INCREMENT,
  atenc_pac_id INT(11) NOT NULL,
  atenc_medico_id INT(11) NOT NULL,
  atenc_espec_id INT(11) NOT NULL,
  atenc_fecha_atenc DATETIME NOT NULL,
  atenc_observacion VARCHAR(400) NOT NULL,
  atenc_tratamiento VARCHAR(400) NOT NULL,
  atenc_dieta VARCHAR(300) NOT NULL,
  atenc_situacion TINYINT(4) UNSIGNED NOT NULL,
  atenc_registra_id INT(11) NOT NULL,
  atenc_fecha_reg DATETIME NOT NULL,
  atenc_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (atenc_id),
  INDEX ix_atenc_fecha_atenc (atenc_fecha_atenc),
  INDEX ix_atenc_situacion (atenc_situacion),
  CONSTRAINT FK_atencion_empleado FOREIGN KEY (atenc_medico_id)
    REFERENCES empleado(empl_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_atencion_especialidad FOREIGN KEY (atenc_espec_id)
    REFERENCES especialidad(espec_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_atencion_paciente FOREIGN KEY (atenc_pac_id)
    REFERENCES paciente(pac_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE historiaclinica (
  hc_id INT(11) NOT NULL AUTO_INCREMENT,
  hc_pac_id INT(11) NOT NULL,
  hc_fecha_suceso DATETIME NOT NULL,
  hc_comentario VARCHAR(400) NOT NULL,
  hc_atenc_id_ref INT(11) DEFAULT NULL,
  hc_fecha_reg DATETIME NOT NULL,
  hc_estado INT(11) NOT NULL,
  PRIMARY KEY (hc_id),
  INDEX ix_hc_fecha_suceso (hc_fecha_suceso),
  CONSTRAINT FK_historiaclinica_paciente FOREIGN KEY (hc_pac_id)
    REFERENCES paciente(pac_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE usuario (
  usu_id INT(11) NOT NULL AUTO_INCREMENT,
  usu_nombre VARCHAR(20) NOT NULL,
  usu_contrasena VARCHAR(32) NOT NULL,
  usu_empl_id INT(11) NOT NULL,
  usu_rol_id INT(11) NOT NULL,
  usu_fecha_reg DATETIME NOT NULL,
  usu_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (usu_id),
  UNIQUE INDEX uk_usu_empl_id (usu_empl_id),
  UNIQUE INDEX uk_usu_nombre (usu_nombre),
  CONSTRAINT FK_usuario_empleado FOREIGN KEY (usu_empl_id)
    REFERENCES empleado(empl_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_usuario_rol FOREIGN KEY (usu_rol_id)
    REFERENCES rol(rol_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE resultado (
  result_id INT(11) NOT NULL AUTO_INCREMENT,
  result_atenc_id INT(11) NOT NULL,
  result_diag_id INT(11) NOT NULL,
  result_fecha_reg DATETIME NOT NULL,
  PRIMARY KEY (result_id),
  CONSTRAINT FK_resultado_atencion FOREIGN KEY (result_atenc_id)
    REFERENCES atencion(atenc_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_resultado_diagnostico FOREIGN KEY (result_diag_id)
    REFERENCES diagnostico(diag_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

CREATE TABLE triaje (
  triaje_id INT(11) NOT NULL AUTO_INCREMENT,
  triaje_atenc_id INT(11) NOT NULL,
  triaje_var_id INT(11) NOT NULL,
  triaje_um_id INT(11) NOT NULL,
  triaje_valor DECIMAL(9, 2) NOT NULL,
  triaje_fecha_reg DATETIME NOT NULL,
  triaje_estado TINYINT(4) UNSIGNED NOT NULL,
  PRIMARY KEY (triaje_id),
  UNIQUE INDEX UK_triaje_var (triaje_atenc_id, triaje_var_id),
  CONSTRAINT FK_triaje_atencion FOREIGN KEY (triaje_atenc_id)
    REFERENCES atencion(atenc_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_triaje_um FOREIGN KEY (triaje_um_id)
    REFERENCES um(um_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_triaje_variable FOREIGN KEY (triaje_var_id)
    REFERENCES variable(var_id) ON DELETE RESTRICT ON UPDATE RESTRICT
)
ENGINE = INNODB
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

DELIMITER $$

CREATE PROCEDURE pa_atencion_activate(
	IN _atenc_id int(11)
)
BEGIN
	UPDATE atencion
	SET atenc_estado = 1
	WHERE atenc_id = _atenc_id;
END
$$

CREATE PROCEDURE pa_atencion_delete(
	IN _atenc_id int(11)
)
BEGIN
	UPDATE atencion
	SET atenc_estado = 0
	WHERE atenc_id = _atenc_id;
END
$$

CREATE PROCEDURE pa_atencion_getByID(
	IN _atenc_id int(11)
)
BEGIN
	SELECT atenc_id, pac_id, empl_id, espec_id, espec_nombre, atenc_fecha_atenc, atenc_observacion,
		   atenc_tratamiento, atenc_dieta, atenc_situacion, atenc_registra_id,
		   atenc_fecha_reg, atenc_estado
	FROM atencion atenc
		INNER JOIN empleado empl ON atenc.atenc_medico_id = empl.empl_id
		INNER JOIN especialidad espec ON atenc.atenc_espec_id = espec.espec_id
		INNER JOIN paciente pac ON atenc.atenc_pac_id = pac.pac_id
	WHERE atenc.atenc_id = _atenc_id;
END
$$

CREATE PROCEDURE pa_atencion_getRow(
	IN _atenc_id int(11)
)
BEGIN
	SELECT atenc_id, pac_id, empl_id, espec_id, espec_nombre, atenc_fecha_atenc, atenc_observacion,
		   atenc_tratamiento, atenc_dieta, atenc_situacion, atenc_registra_id,
		   atenc_fecha_reg, atenc_estado
	FROM atencion atenc
		INNER JOIN empleado empl ON atenc.atenc_medico_id = empl.empl_id
		INNER JOIN especialidad espec ON atenc.atenc_espec_id = espec.espec_id
		INNER JOIN paciente pac ON atenc.atenc_pac_id = pac.pac_id
	WHERE atenc.atenc_id = _atenc_id;
END
$$

CREATE PROCEDURE pa_atencion_insert(
	OUT _atenc_id int(11),
	IN _atenc_pac_id int(11),
	IN _atenc_medico_id int(11),
	IN _atenc_espec_id int(11),
	IN _atenc_fecha_atenc datetime,
	IN _atenc_observacion varchar(400),
	IN _atenc_tratamiento varchar(400),
	IN _atenc_dieta varchar(300),
	IN _atenc_situacion tinyint(4) unsigned,
	IN _atenc_registra_id int(11)
)
BEGIN
	INSERT INTO atencion (
		atenc_pac_id,
		atenc_medico_id,
		atenc_espec_id,
		atenc_fecha_atenc,
		atenc_observacion,
		atenc_tratamiento,
		atenc_dieta,
		atenc_situacion,
		atenc_registra_id,
		atenc_fecha_reg,
		atenc_estado
	)
	VALUES (
		_atenc_pac_id,
		_atenc_medico_id,
		_atenc_espec_id,
		_atenc_fecha_atenc,
		_atenc_observacion,
		_atenc_tratamiento,
		_atenc_dieta,
		1,
		_atenc_registra_id,
		NOW(),
		1
	);
	SET _atenc_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_atencion_list(
	IN _buscar varchar(50),
	IN _atenc_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT atenc_id, pac_id, empl_id, espec_id, espec_nombre, atenc_fecha_atenc, atenc_observacion,
		   atenc_tratamiento, atenc_dieta, atenc_situacion, atenc_registra_id,
		   atenc_fecha_reg, atenc_estado
	FROM atencion atenc
		INNER JOIN empleado empl ON atenc.atenc_medico_id = empl.empl_id
		INNER JOIN especialidad espec ON atenc.atenc_espec_id = espec.espec_id
		INNER JOIN paciente pac ON atenc.atenc_pac_id = pac.pac_id
	WHERE atenc.atenc_estado = _atenc_estado;
END
$$

CREATE PROCEDURE pa_atencion_listcbo(
	IN _atenc_id int(11)
)
BEGIN
	SELECT atenc_id, pac_id, empl_id, espec_id, espec_nombre, atenc_fecha_atenc, atenc_observacion,
		   atenc_tratamiento, atenc_dieta, atenc_situacion, atenc_registra_id,
		   atenc_fecha_reg, atenc_estado
	FROM atencion atenc
		INNER JOIN empleado empl ON atenc.atenc_medico_id = empl.empl_id
		INNER JOIN especialidad espec ON atenc.atenc_espec_id = espec.espec_id
		INNER JOIN paciente pac ON atenc.atenc_pac_id = pac.pac_id
	WHERE atenc.atenc_estado = 1 OR (atenc.atenc_id = _atenc_id);
END
$$

CREATE PROCEDURE pa_atencion_update(
	IN _atenc_id int(11),
	IN _atenc_pac_id int(11),
	IN _atenc_medico_id int(11),
	IN _atenc_espec_id int(11),
	IN _atenc_fecha_atenc datetime,
	IN _atenc_observacion varchar(400),
	IN _atenc_tratamiento varchar(400),
	IN _atenc_dieta varchar(300),
	IN _atenc_situacion tinyint(4) unsigned
)
BEGIN
	UPDATE atencion
	SET atenc_pac_id = _atenc_pac_id,
		atenc_medico_id = _atenc_medico_id,
		atenc_espec_id = _atenc_espec_id,
		atenc_fecha_atenc = _atenc_fecha_atenc,
		atenc_observacion = _atenc_observacion,
		atenc_tratamiento = _atenc_tratamiento,
		atenc_dieta = _atenc_dieta,
		atenc_situacion = _atenc_situacion
	WHERE atenc_id = _atenc_id;
END
$$

CREATE PROCEDURE pa_cargo_activate(
	IN _carg_id int(11)
)
BEGIN
	UPDATE cargo
	SET carg_estado = 1
	WHERE carg_id = _carg_id;
END
$$

CREATE PROCEDURE pa_cargo_delete(
	IN _carg_id int(11)
)
BEGIN
	UPDATE cargo
	SET carg_estado = 0
	WHERE carg_id = _carg_id;
END
$$

CREATE PROCEDURE pa_cargo_getByID(
	IN _carg_id int(11)
)
BEGIN
	SELECT carg_id, carg_nombre, carg_estado
	FROM cargo carg
	WHERE carg.carg_id = _carg_id;
END
$$

CREATE PROCEDURE pa_cargo_getRow(
	IN _carg_id int(11)
)
BEGIN
	SELECT carg_id, carg_nombre, carg_estado
	FROM cargo carg
	WHERE carg.carg_id = _carg_id;
END
$$

CREATE PROCEDURE pa_cargo_insert(
	OUT _carg_id int(11),
	IN _carg_nombre varchar(50)
)
BEGIN
	INSERT INTO cargo (
		carg_nombre,
		carg_estado
	)
	VALUES (
		_carg_nombre,
		1
	);
	SET _carg_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_cargo_list(
	IN _buscar varchar(50),
	IN _carg_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT carg_id, carg_nombre, carg_estado
	FROM cargo carg
	WHERE carg.carg_estado = _carg_estado
	  AND (carg.carg_nombre LIKE _buscar);
END
$$

CREATE PROCEDURE pa_cargo_listcbo(
	IN _carg_id int(11)
)
BEGIN
	SELECT carg_id, carg_nombre, carg_estado
	FROM cargo carg
	WHERE carg.carg_estado = 1 OR (carg.carg_id = _carg_id);
END
$$

CREATE PROCEDURE pa_cargo_update(
	IN _carg_id int(11),
	IN _carg_nombre varchar(50)
)
BEGIN
	UPDATE cargo
	SET carg_nombre = _carg_nombre
	WHERE carg_id = _carg_id;
END
$$

CREATE PROCEDURE pa_categvariable_activate(
	IN _catvar_id int(11)
)
BEGIN
	UPDATE categvariable
	SET catvar_estado = 1
	WHERE catvar_id = _catvar_id;
END
$$

CREATE PROCEDURE pa_categvariable_delete(
	IN _catvar_id int(11)
)
BEGIN
	UPDATE categvariable
	SET catvar_estado = 0
	WHERE catvar_id = _catvar_id;
END
$$

CREATE PROCEDURE pa_categvariable_getByID(
	IN _catvar_id int(11)
)
BEGIN
	SELECT catvar_id, catvar_nombre, catvar_estado
	FROM categvariable catvar
	WHERE catvar.catvar_id = _catvar_id;
END
$$

CREATE PROCEDURE pa_categvariable_getRow(
	IN _catvar_id int(11)
)
BEGIN
	SELECT catvar_id, catvar_nombre, catvar_estado
	FROM categvariable catvar
	WHERE catvar.catvar_id = _catvar_id;
END
$$

CREATE PROCEDURE pa_categvariable_insert(
	OUT _catvar_id int(11),
	IN _catvar_nombre varchar(50)
)
BEGIN
	INSERT INTO categvariable (
		catvar_nombre,
		catvar_estado
	)
	VALUES (
		_catvar_nombre,
		1
	);
	SET _catvar_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_categvariable_list(
	IN _buscar varchar(50),
	IN _catvar_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT catvar_id, catvar_nombre, catvar_estado
	FROM categvariable catvar
	WHERE catvar.catvar_estado = _catvar_estado
	  AND (catvar.catvar_nombre LIKE _buscar);
END
$$

CREATE PROCEDURE pa_categvariable_listcbo(
	IN _catvar_id int(11)
)
BEGIN
	SELECT catvar_id, catvar_nombre, catvar_estado
	FROM categvariable catvar
	WHERE catvar.catvar_estado = 1 OR (catvar.catvar_id = _catvar_id);
END
$$

CREATE PROCEDURE pa_categvariable_update(
	IN _catvar_id int(11),
	IN _catvar_nombre varchar(50)
)
BEGIN
	UPDATE categvariable
	SET catvar_nombre = _catvar_nombre
	WHERE catvar_id = _catvar_id;
END
$$

CREATE PROCEDURE pa_diagnostico_activate(
	IN _diag_id int(11)
)
BEGIN
	UPDATE diagnostico
	SET diag_estado = 1
	WHERE diag_id = _diag_id;
END
$$

CREATE PROCEDURE pa_diagnostico_delete(
	IN _diag_id int(11)
)
BEGIN
	UPDATE diagnostico
	SET diag_estado = 0
	WHERE diag_id = _diag_id;
END
$$

CREATE PROCEDURE pa_diagnostico_getByID(
	IN _diag_id int(11)
)
BEGIN
	SELECT diag_id, diag_nombre, diag_tratamiento_sug, diag_dieta_sug, diag_estado
	FROM diagnostico diag
	WHERE diag.diag_id = _diag_id;
END
$$

CREATE PROCEDURE pa_diagnostico_getRow(
	IN _diag_id int(11)
)
BEGIN
	SELECT diag_id, diag_nombre, diag_tratamiento_sug, diag_dieta_sug, diag_estado
	FROM diagnostico diag
	WHERE diag.diag_id = _diag_id;
END
$$

CREATE PROCEDURE pa_diagnostico_insert(
	OUT _diag_id int(11),
	IN _diag_nombre varchar(50),
	IN _diag_tratamiento_sug varchar(500),
	IN _diag_dieta_sug varchar(500)
)
BEGIN
	INSERT INTO diagnostico (
		diag_nombre,
		diag_tratamiento_sug,
		diag_dieta_sug,
		diag_estado
	)
	VALUES (
		_diag_nombre,
		_diag_tratamiento_sug,
		_diag_dieta_sug,
		1
	);
	SET _diag_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_diagnostico_list(
	IN _buscar varchar(50),
	IN _diag_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT diag_id, diag_nombre, diag_tratamiento_sug, diag_dieta_sug, diag_estado
	FROM diagnostico diag
	WHERE diag.diag_estado = _diag_estado
	  AND (diag.diag_nombre LIKE _buscar);
END
$$

CREATE PROCEDURE pa_diagnostico_listcbo(
	IN _diag_id int(11)
)
BEGIN
	SELECT diag_id, diag_nombre, diag_tratamiento_sug, diag_dieta_sug, diag_estado
	FROM diagnostico diag
	WHERE diag.diag_estado = 1 OR (diag.diag_id = _diag_id);
END
$$

CREATE PROCEDURE pa_diagnostico_update(
	IN _diag_id int(11),
	IN _diag_nombre varchar(50),
	IN _diag_tratamiento_sug varchar(500),
	IN _diag_dieta_sug varchar(500)
)
BEGIN
	UPDATE diagnostico
	SET diag_nombre = _diag_nombre,
		diag_tratamiento_sug = _diag_tratamiento_sug,
		diag_dieta_sug = _diag_dieta_sug
	WHERE diag_id = _diag_id;
END
$$

CREATE PROCEDURE pa_direccion_activate(
	IN _direc_id int(11)
)
BEGIN
	UPDATE direccion
	SET direc_estado = 1
	WHERE direc_id = _direc_id;
END
$$

CREATE PROCEDURE pa_direccion_delete(
	IN _direc_id int(11)
)
BEGIN
	UPDATE direccion
	SET direc_estado = 0
	WHERE direc_id = _direc_id;
END
$$

CREATE PROCEDURE pa_direccion_getByID(
	IN _direc_id int(11)
)
BEGIN
	SELECT direc_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   ubig_id, ubig_nombre, direc_descripcion, direc_fecha_reg, direc_estado
	FROM direccion direc
		INNER JOIN persona pers ON direc.direc_pers_id = pers.pers_id
		INNER JOIN ubigeo ubig ON direc.direc_ubig_id = ubig.ubig_id
	WHERE direc.direc_id = _direc_id;
END
$$

CREATE PROCEDURE pa_direccion_getRow(
	IN _direc_id int(11)
)
BEGIN
	SELECT direc_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   ubig_id, ubig_nombre, direc_descripcion, direc_fecha_reg, direc_estado
	FROM direccion direc
		INNER JOIN persona pers ON direc.direc_pers_id = pers.pers_id
		INNER JOIN ubigeo ubig ON direc.direc_ubig_id = ubig.ubig_id
	WHERE direc.direc_id = _direc_id;
END
$$

CREATE PROCEDURE pa_direccion_insert(
	OUT _direc_id int(11),
	IN _direc_pers_id int(11),
	IN _direc_ubig_id int(11),
	IN _direc_descripcion varchar(200)
)
BEGIN
	INSERT INTO direccion (
		direc_pers_id,
		direc_ubig_id,
		direc_descripcion,
		direc_fecha_reg,
		direc_estado
	)
	VALUES (
		_direc_pers_id,
		_direc_ubig_id,
		_direc_descripcion,
		NOW(),
		1
	);
	SET _direc_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_direccion_list(
	IN _buscar varchar(50),
	IN _direc_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT direc_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   ubig_id, ubig_nombre, direc_descripcion, direc_fecha_reg, direc_estado
	FROM direccion direc
		INNER JOIN persona pers ON direc.direc_pers_id = pers.pers_id
		INNER JOIN ubigeo ubig ON direc.direc_ubig_id = ubig.ubig_id
	WHERE direc.direc_estado = _direc_estado
	  AND (direc.direc_descripcion LIKE _buscar);
END
$$

CREATE PROCEDURE pa_direccion_listcbo(
	IN _direc_id int(11)
)
BEGIN
	SELECT direc_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   ubig_id, ubig_nombre, direc_descripcion, direc_fecha_reg, direc_estado
	FROM direccion direc
		INNER JOIN persona pers ON direc.direc_pers_id = pers.pers_id
		INNER JOIN ubigeo ubig ON direc.direc_ubig_id = ubig.ubig_id
	WHERE direc.direc_estado = 1 OR (direc.direc_id = _direc_id);
END
$$

CREATE PROCEDURE pa_direccion_update(
	IN _direc_id int(11),
	IN _direc_pers_id int(11),
	IN _direc_ubig_id int(11),
	IN _direc_descripcion varchar(200)
)
BEGIN
	UPDATE direccion
	SET direc_pers_id = _direc_pers_id,
		direc_ubig_id = _direc_ubig_id,
		direc_descripcion = _direc_descripcion
	WHERE direc_id = _direc_id;
END
$$

CREATE PROCEDURE pa_empleado_activate(
	IN _empl_id int(11)
)
BEGIN
	UPDATE empleado
	SET empl_estado = 1
	WHERE empl_id = _empl_id;
END
$$

CREATE PROCEDURE pa_empleado_delete(
	IN _empl_id int(11)
)
BEGIN
	UPDATE empleado
	SET empl_estado = 0
	WHERE empl_id = _empl_id;
END
$$

CREATE PROCEDURE pa_empleado_getByID(
	IN _empl_id int(11)
)
BEGIN
	SELECT empl_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   carg_id, carg_nombre, empl_fecha_reg, empl_estado
	FROM empleado empl
		INNER JOIN cargo carg ON empl.empl_carg_id = carg.carg_id
		INNER JOIN persona pers ON empl.empl_pers_id = pers.pers_id
	WHERE empl.empl_id = _empl_id;
END
$$

CREATE PROCEDURE pa_empleado_getRow(
	IN _empl_id int(11)
)
BEGIN
	SELECT empl_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   carg_id, carg_nombre, empl_fecha_reg, empl_estado
	FROM empleado empl
		INNER JOIN cargo carg ON empl.empl_carg_id = carg.carg_id
		INNER JOIN persona pers ON empl.empl_pers_id = pers.pers_id
	WHERE empl.empl_id = _empl_id;
END
$$

CREATE PROCEDURE pa_empleado_insert(
	OUT _empl_id int(11),
	IN _empl_pers_id int(11),
	IN _empl_carg_id int(11)
)
BEGIN
	INSERT INTO empleado (
		empl_pers_id,
		empl_carg_id,
		empl_fecha_reg,
		empl_estado
	)
	VALUES (
		_empl_pers_id,
		_empl_carg_id,
		NOW(),
		1
	);
	SET _empl_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_empleado_list(
	IN _buscar varchar(50),
	IN _empl_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT empl_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   carg_id, carg_nombre, empl_fecha_reg, empl_estado
	FROM empleado empl
		INNER JOIN cargo carg ON empl.empl_carg_id = carg.carg_id
		INNER JOIN persona pers ON empl.empl_pers_id = pers.pers_id
	WHERE empl.empl_estado = _empl_estado;
END
$$

CREATE PROCEDURE pa_empleado_listcbo(
	IN _empl_id int(11)
)
BEGIN
	SELECT empl_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   carg_id, carg_nombre, empl_fecha_reg, empl_estado
	FROM empleado empl
		INNER JOIN cargo carg ON empl.empl_carg_id = carg.carg_id
		INNER JOIN persona pers ON empl.empl_pers_id = pers.pers_id
	WHERE empl.empl_estado = 1 OR (empl.empl_id = _empl_id);
END
$$

CREATE PROCEDURE pa_empleado_update(
	IN _empl_id int(11),
	IN _empl_pers_id int(11),
	IN _empl_carg_id int(11)
)
BEGIN
	UPDATE empleado
	SET empl_pers_id = _empl_pers_id,
		empl_carg_id = _empl_carg_id
	WHERE empl_id = _empl_id;
END
$$

CREATE PROCEDURE pa_especialidad_activate(
	IN _espec_id int(11)
)
BEGIN
	UPDATE especialidad
	SET espec_estado = 1
	WHERE espec_id = _espec_id;
END
$$

CREATE PROCEDURE pa_especialidad_delete(
	IN _espec_id int(11)
)
BEGIN
	UPDATE especialidad
	SET espec_estado = 0
	WHERE espec_id = _espec_id;
END
$$

CREATE PROCEDURE pa_especialidad_getByID(
	IN _espec_id int(11)
)
BEGIN
	SELECT espec_id, espec_nombre, espec_estado
	FROM especialidad espec
	WHERE espec.espec_id = _espec_id;
END
$$

CREATE PROCEDURE pa_especialidad_getRow(
	IN _espec_id int(11)
)
BEGIN
	SELECT espec_id, espec_nombre, espec_estado
	FROM especialidad espec
	WHERE espec.espec_id = _espec_id;
END
$$

CREATE PROCEDURE pa_especialidad_insert(
	OUT _espec_id int(11),
	IN _espec_nombre varchar(50)
)
BEGIN
	INSERT INTO especialidad (
		espec_nombre,
		espec_estado
	)
	VALUES (
		_espec_nombre,
		1
	);
	SET _espec_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_especialidad_list(
	IN _buscar varchar(50),
	IN _espec_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT espec_id, espec_nombre, espec_estado
	FROM especialidad espec
	WHERE espec.espec_estado = _espec_estado
	  AND (espec.espec_nombre LIKE _buscar);
END
$$

CREATE PROCEDURE pa_especialidad_listcbo(
	IN _espec_id int(11)
)
BEGIN
	SELECT espec_id, espec_nombre, espec_estado
	FROM especialidad espec
	WHERE espec.espec_estado = 1 OR (espec.espec_id = _espec_id);
END
$$

CREATE PROCEDURE pa_especialidad_update(
	IN _espec_id int(11),
	IN _espec_nombre varchar(50)
)
BEGIN
	UPDATE especialidad
	SET espec_nombre = _espec_nombre
	WHERE espec_id = _espec_id;
END
$$

CREATE PROCEDURE pa_historiaclinica_activate(
	IN _hc_id int(11)
)
BEGIN
	UPDATE historiaclinica
	SET hc_estado = 1
	WHERE hc_id = _hc_id;
END
$$

CREATE PROCEDURE pa_historiaclinica_delete(
	IN _hc_id int(11)
)
BEGIN
	UPDATE historiaclinica
	SET hc_estado = 0
	WHERE hc_id = _hc_id;
END
$$

CREATE PROCEDURE pa_historiaclinica_getByID(
	IN _hc_id int(11)
)
BEGIN
	SELECT hc_id, pac_id, hc_fecha_suceso, hc_comentario, hc_atenc_id_ref, hc_fecha_reg,
		   hc_estado
	FROM historiaclinica hc
		INNER JOIN paciente pac ON hc.hc_pac_id = pac.pac_id
	WHERE hc.hc_id = _hc_id;
END
$$

CREATE PROCEDURE pa_historiaclinica_getRow(
	IN _hc_id int(11)
)
BEGIN
	SELECT hc_id, pac_id, hc_fecha_suceso, hc_comentario, hc_atenc_id_ref, hc_fecha_reg,
		   hc_estado
	FROM historiaclinica hc
		INNER JOIN paciente pac ON hc.hc_pac_id = pac.pac_id
	WHERE hc.hc_id = _hc_id;
END
$$

CREATE PROCEDURE pa_historiaclinica_insert(
	OUT _hc_id int(11),
	IN _hc_pac_id int(11),
	IN _hc_fecha_suceso datetime,
	IN _hc_comentario varchar(400),
	IN _hc_atenc_id_ref int(11)
)
BEGIN
	INSERT INTO historiaclinica (
		hc_pac_id,
		hc_fecha_suceso,
		hc_comentario,
		hc_atenc_id_ref,
		hc_fecha_reg,
		hc_estado
	)
	VALUES (
		_hc_pac_id,
		_hc_fecha_suceso,
		_hc_comentario,
		_hc_atenc_id_ref,
		NOW(),
		1
	);
	SET _hc_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_historiaclinica_list(
	IN _buscar varchar(50),
	IN _hc_estado int(11)
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT hc_id, pac_id, hc_fecha_suceso, hc_comentario, hc_atenc_id_ref, hc_fecha_reg,
		   hc_estado
	FROM historiaclinica hc
		INNER JOIN paciente pac ON hc.hc_pac_id = pac.pac_id
	WHERE hc.hc_estado = _hc_estado;
END
$$

CREATE PROCEDURE pa_historiaclinica_listcbo(
	IN _hc_id int(11)
)
BEGIN
	SELECT hc_id, pac_id, hc_fecha_suceso, hc_comentario, hc_atenc_id_ref, hc_fecha_reg,
		   hc_estado
	FROM historiaclinica hc
		INNER JOIN paciente pac ON hc.hc_pac_id = pac.pac_id
	WHERE hc.hc_estado = 1 OR (hc.hc_id = _hc_id);
END
$$

CREATE PROCEDURE pa_historiaclinica_update(
	IN _hc_id int(11),
	IN _hc_pac_id int(11),
	IN _hc_fecha_suceso datetime,
	IN _hc_comentario varchar(400),
	IN _hc_atenc_id_ref int(11)
)
BEGIN
	UPDATE historiaclinica
	SET hc_pac_id = _hc_pac_id,
		hc_fecha_suceso = _hc_fecha_suceso,
		hc_comentario = _hc_comentario,
		hc_atenc_id_ref = _hc_atenc_id_ref
	WHERE hc_id = _hc_id;
END
$$

CREATE PROCEDURE pa_indicador_activate(
	IN _indic_id int(11)
)
BEGIN
	UPDATE indicador
	SET indic_estado = 1
	WHERE indic_id = _indic_id;
END
$$

CREATE PROCEDURE pa_indicador_delete(
	IN _indic_id int(11)
)
BEGIN
	UPDATE indicador
	SET indic_estado = 0
	WHERE indic_id = _indic_id;
END
$$

CREATE PROCEDURE pa_indicador_getByID(
	IN _indic_id int(11)
)
BEGIN
	SELECT indic_id, indic_nombre, indic_var1_id, indic_var2_id, indic_estado
	FROM indicador indic
	WHERE indic.indic_id = _indic_id;
END
$$

CREATE PROCEDURE pa_indicador_getRow(
	IN _indic_id int(11)
)
BEGIN
	SELECT indic_id, indic_nombre, indic_var1_id, indic_var2_id, indic_estado
	FROM indicador indic
	WHERE indic.indic_id = _indic_id;
END
$$

CREATE PROCEDURE pa_indicador_insert(
	OUT _indic_id int(11),
	IN _indic_nombre varchar(50),
	IN _indic_var1_id int(11),
	IN _indic_var2_id int(11)
)
BEGIN
	INSERT INTO indicador (
		indic_nombre,
		indic_var1_id,
		indic_var2_id,
		indic_estado
	)
	VALUES (
		_indic_nombre,
		_indic_var1_id,
		_indic_var2_id,
		1
	);
	SET _indic_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_indicador_list(
	IN _buscar varchar(50),
	IN _indic_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT indic_id, indic_nombre, indic_var1_id, indic_var2_id, indic_estado
	FROM indicador indic
	WHERE indic.indic_estado = _indic_estado
	  AND (indic.indic_nombre LIKE _buscar);
END
$$

CREATE PROCEDURE pa_indicador_listcbo(
	IN _indic_id int(11)
)
BEGIN
	SELECT indic_id, indic_nombre, indic_var1_id, indic_var2_id, indic_estado
	FROM indicador indic
	WHERE indic.indic_estado = 1 OR (indic.indic_id = _indic_id);
END
$$

CREATE PROCEDURE pa_indicador_update(
	IN _indic_id int(11),
	IN _indic_nombre varchar(50),
	IN _indic_var1_id int(11),
	IN _indic_var2_id int(11)
)
BEGIN
	UPDATE indicador
	SET indic_nombre = _indic_nombre,
		indic_var1_id = _indic_var1_id,
		indic_var2_id = _indic_var2_id
	WHERE indic_id = _indic_id;
END
$$

CREATE PROCEDURE pa_paciente_activate(
	IN _pac_id int(11)
)
BEGIN
	UPDATE paciente
	SET pac_estado = 1
	WHERE pac_id = _pac_id;
END
$$

CREATE PROCEDURE pa_paciente_delete(
	IN _pac_id int(11)
)
BEGIN
	UPDATE paciente
	SET pac_estado = 0
	WHERE pac_id = _pac_id;
END
$$

CREATE PROCEDURE pa_paciente_getByID(
	IN _pac_id int(11)
)
BEGIN
	SELECT pac_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   pac_fecha_reg, pac_estado
	FROM paciente pac
		INNER JOIN persona pers ON pac.pac_pers_id = pers.pers_id
	WHERE pac.pac_id = _pac_id;
END
$$

CREATE PROCEDURE pa_paciente_getRow(
	IN _pac_id int(11)
)
BEGIN
	SELECT pac_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   pac_fecha_reg, pac_estado
	FROM paciente pac
		INNER JOIN persona pers ON pac.pac_pers_id = pers.pers_id
	WHERE pac.pac_id = _pac_id;
END
$$

CREATE PROCEDURE pa_paciente_insert(
	OUT _pac_id int(11),
	IN _pac_pers_id int(11)
)
BEGIN
	INSERT INTO paciente (
		pac_pers_id,
		pac_fecha_reg,
		pac_estado
	)
	VALUES (
		_pac_pers_id,
		NOW(),
		1
	);
	SET _pac_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_paciente_list(
	IN _buscar varchar(50),
	IN _pac_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT pac_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
	       pers_fecha_nac, tdi_id, tdi_abrev, pers_tdi_nro, pac_fecha_reg, pac_estado
	FROM paciente pac
		INNER JOIN persona pers ON pac.pac_pers_id = pers.pers_id
	    INNER JOIN tipodocident tdi ON pers.pers_tdi_id = tdi.tdi_id
	WHERE pac.pac_estado = _pac_estado
	    AND (pers.pers_nombre like _buscar
        or pers.pers_snombre like _buscar
	    or pers_ap_paterno LIKE _buscar
	    or pers_ap_materno LIKE  _buscar);
END
$$

CREATE PROCEDURE pa_paciente_listcbo(
	IN _pac_id int(11)
)
BEGIN
	SELECT pac_id, pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno,
		   pac_fecha_reg, pac_estado
	FROM paciente pac
		INNER JOIN persona pers ON pac.pac_pers_id = pers.pers_id
	WHERE pac.pac_estado = 1 OR (pac.pac_id = _pac_id);
END
$$

CREATE PROCEDURE pa_paciente_update(
	IN _pac_id int(11),
	IN _pac_pers_id int(11)
)
BEGIN
	UPDATE paciente
	SET pac_pers_id = _pac_pers_id
	WHERE pac_id = _pac_id;
END
$$

CREATE PROCEDURE pa_parentesco_activate(
	IN _parent_id int(11)
)
BEGIN
	UPDATE parentesco
	SET parent_estado = 1
	WHERE parent_id = _parent_id;
END
$$

CREATE PROCEDURE pa_parentesco_delete(
	IN _parent_id int(11)
)
BEGIN
	UPDATE parentesco
	SET parent_estado = 0
	WHERE parent_id = _parent_id;
END
$$

CREATE PROCEDURE pa_parentesco_getByID(
	IN _parent_id int(11)
)
BEGIN
	SELECT parent_id, pers1.pers_id as pers1_id, pers1.pers_nombre as pers1_nombre,
		   pers1.pers_snombre as pers1_snombre, pers1.pers_ap_paterno as pers1_ap_paterno,
		   pers1.pers_ap_materno as pers1_ap_materno, pers2.pers_id as pers2_id,
		   pers2.pers_nombre as pers2_nombre, pers2.pers_snombre as pers2_snombre,
		   pers2.pers_ap_paterno as pers2_ap_paterno, pers2.pers_ap_materno as pers2_ap_materno,
		   tparent_id, tparent_nombre, parent_es_apoderado, parent_estado
	FROM parentesco parent
		INNER JOIN persona pers1 ON parent.parent_pers1_id = pers1.pers_id
		INNER JOIN persona pers2 ON parent.parent_pers2_id = pers2.pers_id
		INNER JOIN tipoparentesco tparent ON parent.parent_tparent_id = tparent.tparent_id
	WHERE parent.parent_id = _parent_id;
END
$$

CREATE PROCEDURE pa_parentesco_getRow(
	IN _parent_id int(11)
)
BEGIN
	SELECT parent_id, pers1.pers_id as pers1_id, pers1.pers_nombre as pers1_nombre,
		   pers1.pers_snombre as pers1_snombre, pers1.pers_ap_paterno as pers1_ap_paterno,
		   pers1.pers_ap_materno as pers1_ap_materno, pers2.pers_id as pers2_id,
		   pers2.pers_nombre as pers2_nombre, pers2.pers_snombre as pers2_snombre,
		   pers2.pers_ap_paterno as pers2_ap_paterno, pers2.pers_ap_materno as pers2_ap_materno,
		   tparent_id, tparent_nombre, parent_es_apoderado, parent_estado
	FROM parentesco parent
		INNER JOIN persona pers1 ON parent.parent_pers1_id = pers1.pers_id
		INNER JOIN persona pers2 ON parent.parent_pers2_id = pers2.pers_id
		INNER JOIN tipoparentesco tparent ON parent.parent_tparent_id = tparent.tparent_id
	WHERE parent.parent_id = _parent_id;
END
$$

CREATE PROCEDURE pa_parentesco_insert(
	OUT _parent_id int(11),
	IN _parent_pers1_id int(11),
	IN _parent_pers2_id int(11),
	IN _parent_tparent_id int(11),
	IN _parent_es_apoderado tinyint(4) unsigned
)
BEGIN
	INSERT INTO parentesco (
		parent_pers1_id,
		parent_pers2_id,
		parent_tparent_id,
		parent_es_apoderado,
		parent_estado
	)
	VALUES (
		_parent_pers1_id,
		_parent_pers2_id,
		_parent_tparent_id,
		_parent_es_apoderado,
		1
	);
	SET _parent_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_parentesco_list(
	IN _buscar varchar(50),
	IN _parent_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT parent_id, pers1.pers_id as pers1_id, pers1.pers_nombre as pers1_nombre,
		   pers1.pers_snombre as pers1_snombre, pers1.pers_ap_paterno as pers1_ap_paterno,
		   pers1.pers_ap_materno as pers1_ap_materno, pers2.pers_id as pers2_id,
		   pers2.pers_nombre as pers2_nombre, pers2.pers_snombre as pers2_snombre,
		   pers2.pers_ap_paterno as pers2_ap_paterno, pers2.pers_ap_materno as pers2_ap_materno,
		   tparent_id, tparent_nombre, parent_es_apoderado, parent_estado
	FROM parentesco parent
		INNER JOIN persona pers1 ON parent.parent_pers1_id = pers1.pers_id
		INNER JOIN persona pers2 ON parent.parent_pers2_id = pers2.pers_id
		INNER JOIN tipoparentesco tparent ON parent.parent_tparent_id = tparent.tparent_id
	WHERE parent.parent_estado = _parent_estado;
END
$$

CREATE PROCEDURE pa_parentesco_listcbo(
	IN _parent_id int(11)
)
BEGIN
	SELECT parent_id, pers1.pers_id as pers1_id, pers1.pers_nombre as pers1_nombre,
		   pers1.pers_snombre as pers1_snombre, pers1.pers_ap_paterno as pers1_ap_paterno,
		   pers1.pers_ap_materno as pers1_ap_materno, pers2.pers_id as pers2_id,
		   pers2.pers_nombre as pers2_nombre, pers2.pers_snombre as pers2_snombre,
		   pers2.pers_ap_paterno as pers2_ap_paterno, pers2.pers_ap_materno as pers2_ap_materno,
		   tparent_id, tparent_nombre, parent_es_apoderado, parent_estado
	FROM parentesco parent
		INNER JOIN persona pers1 ON parent.parent_pers1_id = pers1.pers_id
		INNER JOIN persona pers2 ON parent.parent_pers2_id = pers2.pers_id
		INNER JOIN tipoparentesco tparent ON parent.parent_tparent_id = tparent.tparent_id
	WHERE parent.parent_estado = 1 OR (parent.parent_id = _parent_id);
END
$$

CREATE PROCEDURE pa_parentesco_update(
	IN _parent_id int(11),
	IN _parent_pers1_id int(11),
	IN _parent_pers2_id int(11),
	IN _parent_tparent_id int(11),
	IN _parent_es_apoderado tinyint(4) unsigned
)
BEGIN
	UPDATE parentesco
	SET parent_pers1_id = _parent_pers1_id,
		parent_pers2_id = _parent_pers2_id,
		parent_tparent_id = _parent_tparent_id,
		parent_es_apoderado = _parent_es_apoderado
	WHERE parent_id = _parent_id;
END
$$

CREATE PROCEDURE pa_percentil_activate(
	IN _percent_id int(11)
)
BEGIN
	UPDATE percentil
	SET percent_estado = 1
	WHERE percent_id = _percent_id;
END
$$

CREATE PROCEDURE pa_percentil_delete(
	IN _percent_id int(11)
)
BEGIN
	UPDATE percentil
	SET percent_estado = 0
	WHERE percent_id = _percent_id;
END
$$

CREATE PROCEDURE pa_percentil_getByID(
	IN _percent_id int(11)
)
BEGIN
	SELECT percent_id, percent_sexo, indic_id, indic_nombre, percent_var1_valor, percent_var2_valor,
		   percent_percentil, percent_estado
	FROM percentil percent
		INNER JOIN indicador indic ON percent.percent_indic_id = indic.indic_id
	WHERE percent.percent_id = _percent_id;
END
$$

CREATE PROCEDURE pa_percentil_getRow(
	IN _percent_id int(11)
)
BEGIN
	SELECT percent_id, percent_sexo, indic_id, indic_nombre, percent_var1_valor, percent_var2_valor,
		   percent_percentil, percent_estado
	FROM percentil percent
		INNER JOIN indicador indic ON percent.percent_indic_id = indic.indic_id
	WHERE percent.percent_id = _percent_id;
END
$$

CREATE PROCEDURE pa_percentil_insert(
	OUT _percent_id int(11),
	IN _percent_sexo char(1),
	IN _percent_indic_id int(11),
	IN _percent_var1_valor decimal(9, 2),
	IN _percent_var2_valor decimal(9, 2),
	IN _percent_percentil decimal(9, 2)
)
BEGIN
	INSERT INTO percentil (
		percent_sexo,
		percent_indic_id,
		percent_var1_valor,
		percent_var2_valor,
		percent_percentil,
		percent_estado
	)
	VALUES (
		_percent_sexo,
		_percent_indic_id,
		_percent_var1_valor,
		_percent_var2_valor,
		_percent_percentil,
		1
	);
	SET _percent_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_percentil_list(
	IN _buscar varchar(50),
	IN _percent_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT percent_id, percent_sexo, indic_id, indic_nombre, percent_var1_valor, percent_var2_valor,
		   percent_percentil, percent_estado
	FROM percentil percent
		INNER JOIN indicador indic ON percent.percent_indic_id = indic.indic_id
	WHERE percent.percent_estado = _percent_estado
	  AND (percent.percent_var1_valor LIKE _buscar
		OR percent.percent_var2_valor LIKE _buscar);
END
$$

CREATE PROCEDURE pa_percentil_listcbo(
	IN _percent_id int(11)
)
BEGIN
	SELECT percent_id, percent_sexo, indic_id, indic_nombre, percent_var1_valor, percent_var2_valor,
		   percent_percentil, percent_estado
	FROM percentil percent
		INNER JOIN indicador indic ON percent.percent_indic_id = indic.indic_id
	WHERE percent.percent_estado = 1 OR (percent.percent_id = _percent_id);
END
$$

CREATE PROCEDURE pa_percentil_update(
	IN _percent_id int(11),
	IN _percent_sexo char(1),
	IN _percent_indic_id int(11),
	IN _percent_var1_valor decimal(9, 2),
	IN _percent_var2_valor decimal(9, 2),
	IN _percent_percentil decimal(9, 2)
)
BEGIN
	UPDATE percentil
	SET percent_sexo = _percent_sexo,
		percent_indic_id = _percent_indic_id,
		percent_var1_valor = _percent_var1_valor,
		percent_var2_valor = _percent_var2_valor,
		percent_percentil = _percent_percentil
	WHERE percent_id = _percent_id;
END
$$

CREATE PROCEDURE pa_persona_activate(
	IN _pers_id int(11)
)
BEGIN
	UPDATE persona
	SET pers_estado = 1
	WHERE pers_id = _pers_id;
END
$$

CREATE PROCEDURE pa_persona_delete(
	IN _pers_id int(11)
)
BEGIN
	UPDATE persona
	SET pers_estado = 0
	WHERE pers_id = _pers_id;
END
$$

CREATE PROCEDURE pa_persona_getByID(
	IN _pers_id int(11)
)
BEGIN
	SELECT pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno, tdi_id,
		   tdi_nombre, tdi_abrev, pers_tdi_nro, pers_sexo, pers_fecha_nac, pers_email,
		   pers_celular, pers_telefono, pers_estado
	FROM persona pers
		INNER JOIN tipodocident tdi ON pers.pers_tdi_id = tdi.tdi_id
	WHERE pers.pers_id = _pers_id;
END
$$

CREATE PROCEDURE pa_persona_getRow(
	IN _pers_id int(11)
)
BEGIN
	SELECT pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno, tdi_id,
		   tdi_nombre, tdi_abrev, pers_tdi_nro, pers_sexo, pers_fecha_nac, pers_email,
		   pers_celular, pers_telefono, pers_estado
	FROM persona pers
		INNER JOIN tipodocident tdi ON pers.pers_tdi_id = tdi.tdi_id
	WHERE pers.pers_id = _pers_id;
END
$$

CREATE PROCEDURE pa_persona_insert(
	OUT _pers_id int(11),
	IN _pers_nombre varchar(30),
	IN _pers_snombre varchar(30),
	IN _pers_ap_paterno varchar(30),
	IN _pers_ap_materno varchar(30),
	IN _pers_tdi_id int(11),
	IN _pers_tdi_nro varchar(20),
	IN _pers_sexo char(1),
	IN _pers_fecha_nac datetime,
	IN _pers_email varchar(20),
	IN _pers_celular varchar(20),
	IN _pers_telefono varchar(20)
)
BEGIN
	INSERT INTO persona (
		pers_nombre,
		pers_snombre,
		pers_ap_paterno,
		pers_ap_materno,
		pers_tdi_id,
		pers_tdi_nro,
		pers_sexo,
		pers_fecha_nac,
		pers_email,
		pers_celular,
		pers_telefono,
		pers_estado
	)
	VALUES (
		_pers_nombre,
		_pers_snombre,
		_pers_ap_paterno,
		_pers_ap_materno,
		_pers_tdi_id,
		_pers_tdi_nro,
		_pers_sexo,
		_pers_fecha_nac,
		_pers_email,
		_pers_celular,
		_pers_telefono,
		1
	);
	SET _pers_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_persona_list(
	IN _buscar varchar(50),
	IN _pers_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno, tdi_id,
		   tdi_nombre, tdi_abrev, pers_tdi_nro, pers_sexo, pers_fecha_nac, pers_email,
		   pers_celular, pers_telefono, pers_estado
	FROM persona pers
		INNER JOIN tipodocident tdi ON pers.pers_tdi_id = tdi.tdi_id
	WHERE pers.pers_estado = _pers_estado
	  AND (pers.pers_nombre LIKE _buscar
		OR pers.pers_snombre LIKE _buscar
		OR pers.pers_ap_paterno LIKE _buscar
		OR pers.pers_ap_materno LIKE _buscar);
END
$$

CREATE PROCEDURE pa_persona_listcbo(
	IN _pers_id int(11)
)
BEGIN
	SELECT pers_id, pers_nombre, pers_snombre, pers_ap_paterno, pers_ap_materno, tdi_id,
		   tdi_nombre, tdi_abrev, pers_tdi_nro, pers_sexo, pers_fecha_nac, pers_email,
		   pers_celular, pers_telefono, pers_estado
	FROM persona pers
		INNER JOIN tipodocident tdi ON pers.pers_tdi_id = tdi.tdi_id
	WHERE pers.pers_estado = 1 OR (pers.pers_id = _pers_id);
END
$$

CREATE PROCEDURE pa_persona_update(
	IN _pers_id int(11),
	IN _pers_nombre varchar(30),
	IN _pers_snombre varchar(30),
	IN _pers_ap_paterno varchar(30),
	IN _pers_ap_materno varchar(30),
	IN _pers_tdi_id int(11),
	IN _pers_tdi_nro varchar(20),
	IN _pers_sexo char(1),
	IN _pers_fecha_nac datetime,
	IN _pers_email varchar(20),
	IN _pers_celular varchar(20),
	IN _pers_telefono varchar(20)
)
BEGIN
	UPDATE persona
	SET pers_nombre = _pers_nombre,
		pers_snombre = _pers_snombre,
		pers_ap_paterno = _pers_ap_paterno,
		pers_ap_materno = _pers_ap_materno,
		pers_tdi_id = _pers_tdi_id,
		pers_tdi_nro = _pers_tdi_nro,
		pers_sexo = _pers_sexo,
		pers_fecha_nac = _pers_fecha_nac,
		pers_email = _pers_email,
		pers_celular = _pers_celular,
		pers_telefono = _pers_telefono
	WHERE pers_id = _pers_id;
END
$$

CREATE PROCEDURE pa_reglas_activate(
	IN _regla_id int(11)
)
BEGIN
	-- reglas no tiene columna estado
END
$$

CREATE PROCEDURE pa_reglas_delete(
	IN _regla_id int(11)
)
BEGIN
	-- reglas no tiene columna estado
END
$$

CREATE PROCEDURE pa_reglas_getByID(
	IN _regla_id int(11)
)
BEGIN
	SELECT regla_id, indic1.indic_id as indic1_id, indic1.indic_nombre as indic1_nombre,
		   indic2.indic_id as indic2_id, indic2.indic_nombre as indic2_nombre,
		   regla_formula, diag_id, diag_nombre
	FROM reglas regla
		INNER JOIN diagnostico diag ON regla.regla_diag_id = diag.diag_id
		INNER JOIN indicador indic1 ON regla.regla_indic1_id = indic1.indic_id
		INNER JOIN indicador indic2 ON regla.regla_indic2_id = indic2.indic_id
	WHERE regla.regla_id = _regla_id;
END
$$

CREATE PROCEDURE pa_reglas_getRow(
	IN _regla_id int(11)
)
BEGIN
	SELECT regla_id, indic1.indic_id as indic1_id, indic1.indic_nombre as indic1_nombre,
		   indic2.indic_id as indic2_id, indic2.indic_nombre as indic2_nombre,
		   regla_formula, diag_id, diag_nombre
	FROM reglas regla
		INNER JOIN diagnostico diag ON regla.regla_diag_id = diag.diag_id
		INNER JOIN indicador indic1 ON regla.regla_indic1_id = indic1.indic_id
		INNER JOIN indicador indic2 ON regla.regla_indic2_id = indic2.indic_id
	WHERE regla.regla_id = _regla_id;
END
$$

CREATE PROCEDURE pa_reglas_insert(
	OUT _regla_id int(11),
	IN _regla_indic1_id int(11),
	IN _regla_indic2_id int(11),
	IN _regla_formula varchar(200),
	IN _regla_diag_id int(11)
)
BEGIN
	INSERT INTO reglas (
		regla_indic1_id,
		regla_indic2_id,
		regla_formula,
		regla_diag_id
	)
	VALUES (
		_regla_indic1_id,
		_regla_indic2_id,
		_regla_formula,
		_regla_diag_id
	);
	SET _regla_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_reglas_list(
	IN _buscar varchar(50)
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT regla_id, indic1.indic_id as indic1_id, indic1.indic_nombre as indic1_nombre,
		   indic2.indic_id as indic2_id, indic2.indic_nombre as indic2_nombre,
		   regla_formula, diag_id, diag_nombre
	FROM reglas regla
		INNER JOIN diagnostico diag ON regla.regla_diag_id = diag.diag_id
		INNER JOIN indicador indic1 ON regla.regla_indic1_id = indic1.indic_id
		INNER JOIN indicador indic2 ON regla.regla_indic2_id = indic2.indic_id;
END
$$

CREATE PROCEDURE pa_reglas_listcbo(
	IN _regla_id int(11)
)
BEGIN
	SELECT regla_id, indic1.indic_id as indic1_id, indic1.indic_nombre as indic1_nombre,
		   indic2.indic_id as indic2_id, indic2.indic_nombre as indic2_nombre,
		   regla_formula, diag_id, diag_nombre
	FROM reglas regla
		INNER JOIN diagnostico diag ON regla.regla_diag_id = diag.diag_id
		INNER JOIN indicador indic1 ON regla.regla_indic1_id = indic1.indic_id
		INNER JOIN indicador indic2 ON regla.regla_indic2_id = indic2.indic_id;
END
$$

CREATE PROCEDURE pa_reglas_update(
	IN _regla_id int(11),
	IN _regla_indic1_id int(11),
	IN _regla_indic2_id int(11),
	IN _regla_formula varchar(200),
	IN _regla_diag_id int(11)
)
BEGIN
	UPDATE reglas
	SET regla_indic1_id = _regla_indic1_id,
		regla_indic2_id = _regla_indic2_id,
		regla_formula = _regla_formula,
		regla_diag_id = _regla_diag_id
	WHERE regla_id = _regla_id;
END
$$

CREATE PROCEDURE pa_resultado_activate(
	IN _result_id int(11)
)
BEGIN
	-- resultado no tiene columna estado
END
$$

CREATE PROCEDURE pa_resultado_delete(
	IN _result_id int(11)
)
BEGIN
	-- resultado no tiene columna estado
END
$$

CREATE PROCEDURE pa_resultado_getByID(
	IN _result_id int(11)
)
BEGIN
	SELECT result_id, atenc_id, diag_id, diag_nombre, result_fecha_reg
	FROM resultado result
		INNER JOIN atencion atenc ON result.result_atenc_id = atenc.atenc_id
		INNER JOIN diagnostico diag ON result.result_diag_id = diag.diag_id
	WHERE result.result_id = _result_id;
END
$$

CREATE PROCEDURE pa_resultado_getRow(
	IN _result_id int(11)
)
BEGIN
	SELECT result_id, atenc_id, diag_id, diag_nombre, result_fecha_reg
	FROM resultado result
		INNER JOIN atencion atenc ON result.result_atenc_id = atenc.atenc_id
		INNER JOIN diagnostico diag ON result.result_diag_id = diag.diag_id
	WHERE result.result_id = _result_id;
END
$$

CREATE PROCEDURE pa_resultado_insert(
	OUT _result_id int(11),
	IN _result_atenc_id int(11),
	IN _result_diag_id int(11)
)
BEGIN
	INSERT INTO resultado (
		result_atenc_id,
		result_diag_id,
		result_fecha_reg
	)
	VALUES (
		_result_atenc_id,
		_result_diag_id,
		NOW()
	);
	SET _result_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_resultado_list(
	IN _buscar varchar(50)
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT result_id, atenc_id, diag_id, diag_nombre, result_fecha_reg
	FROM resultado result
		INNER JOIN atencion atenc ON result.result_atenc_id = atenc.atenc_id
		INNER JOIN diagnostico diag ON result.result_diag_id = diag.diag_id;
END
$$

CREATE PROCEDURE pa_resultado_listcbo(
	IN _result_id int(11)
)
BEGIN
	SELECT result_id, atenc_id, diag_id, diag_nombre, result_fecha_reg
	FROM resultado result
		INNER JOIN atencion atenc ON result.result_atenc_id = atenc.atenc_id
		INNER JOIN diagnostico diag ON result.result_diag_id = diag.diag_id;
END
$$

CREATE PROCEDURE pa_resultado_update(
	IN _result_id int(11),
	IN _result_atenc_id int(11),
	IN _result_diag_id int(11)
)
BEGIN
	UPDATE resultado
	SET result_atenc_id = _result_atenc_id,
		result_diag_id = _result_diag_id
	WHERE result_id = _result_id;
END
$$

CREATE PROCEDURE pa_rol_activate(
	IN _rol_id int(11)
)
BEGIN
	UPDATE rol
	SET rol_estado = 1
	WHERE rol_id = _rol_id;
END
$$

CREATE PROCEDURE pa_rol_delete(
	IN _rol_id int(11)
)
BEGIN
	UPDATE rol
	SET rol_estado = 0
	WHERE rol_id = _rol_id;
END
$$

CREATE PROCEDURE pa_rol_getByID(
	IN _rol_id int(11)
)
BEGIN
	SELECT rol_id, rol_nombre, rol_fecha_reg, rol_estado
	FROM rol rol
	WHERE rol.rol_id = _rol_id;
END
$$

CREATE PROCEDURE pa_rol_getRow(
	IN _rol_id int(11)
)
BEGIN
	SELECT rol_id, rol_nombre, rol_fecha_reg, rol_estado
	FROM rol rol
	WHERE rol.rol_id = _rol_id;
END
$$

CREATE PROCEDURE pa_rol_insert(
	OUT _rol_id int(11),
	IN _rol_nombre varchar(50)
)
BEGIN
	INSERT INTO rol (
		rol_nombre,
		rol_fecha_reg,
		rol_estado
	)
	VALUES (
		_rol_nombre,
		NOW(),
		1
	);
	SET _rol_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_rol_list(
	IN _buscar varchar(50),
	IN _rol_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT rol_id, rol_nombre, rol_fecha_reg, rol_estado
	FROM rol rol
	WHERE rol.rol_estado = _rol_estado
	  AND (rol.rol_nombre LIKE _buscar);
END
$$

CREATE PROCEDURE pa_rol_listcbo(
	IN _rol_id int(11)
)
BEGIN
	SELECT rol_id, rol_nombre, rol_fecha_reg, rol_estado
	FROM rol rol
	WHERE rol.rol_estado = 1 OR (rol.rol_id = _rol_id);
END
$$

CREATE PROCEDURE pa_rol_update(
	IN _rol_id int(11),
	IN _rol_nombre varchar(50)
)
BEGIN
	UPDATE rol
	SET rol_nombre = _rol_nombre
	WHERE rol_id = _rol_id;
END
$$

CREATE PROCEDURE pa_tipodocident_activate(
	IN _tdi_id int(11)
)
BEGIN
	UPDATE tipodocident
	SET tdi_estado = 1
	WHERE tdi_id = _tdi_id;
END
$$

CREATE PROCEDURE pa_tipodocident_delete(
	IN _tdi_id int(11)
)
BEGIN
	UPDATE tipodocident
	SET tdi_estado = 0
	WHERE tdi_id = _tdi_id;
END
$$

CREATE PROCEDURE pa_tipodocident_getByID(
	IN _tdi_id int(11)
)
BEGIN
	SELECT tdi_id, tdi_nombre, tdi_abrev, tdi_estado
	FROM tipodocident tdi
	WHERE tdi.tdi_id = _tdi_id;
END
$$

CREATE PROCEDURE pa_tipodocident_getRow(
	IN _tdi_id int(11)
)
BEGIN
	SELECT tdi_id, tdi_nombre, tdi_abrev, tdi_estado
	FROM tipodocident tdi
	WHERE tdi.tdi_id = _tdi_id;
END
$$

CREATE PROCEDURE pa_tipodocident_insert(
	OUT _tdi_id int(11),
	IN _tdi_nombre varchar(50),
	IN _tdi_abrev varchar(10)
)
BEGIN
	INSERT INTO tipodocident (
		tdi_nombre,
		tdi_abrev,
		tdi_estado
	)
	VALUES (
		_tdi_nombre,
		_tdi_abrev,
		1
	);
	SET _tdi_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_tipodocident_list(
	IN _buscar varchar(50),
	IN _tdi_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT tdi_id, tdi_nombre, tdi_abrev, tdi_estado
	FROM tipodocident tdi
	WHERE tdi.tdi_estado = _tdi_estado
	  AND (tdi.tdi_nombre LIKE _buscar
		OR tdi.tdi_abrev LIKE _buscar);
END
$$

CREATE PROCEDURE pa_tipodocident_listcbo(
	IN _tdi_id int(11)
)
BEGIN
	SELECT tdi_id, tdi_nombre, tdi_abrev, tdi_estado
	FROM tipodocident tdi
	WHERE tdi.tdi_estado = 1 OR (tdi.tdi_id = _tdi_id);
END
$$

CREATE PROCEDURE pa_tipodocident_update(
	IN _tdi_id int(11),
	IN _tdi_nombre varchar(50),
	IN _tdi_abrev varchar(10)
)
BEGIN
	UPDATE tipodocident
	SET tdi_nombre = _tdi_nombre,
		tdi_abrev = _tdi_abrev
	WHERE tdi_id = _tdi_id;
END
$$

CREATE PROCEDURE pa_tipoparentesco_activate(
	IN _tparent_id int(11)
)
BEGIN
	UPDATE tipoparentesco
	SET tparent_estado = 1
	WHERE tparent_id = _tparent_id;
END
$$

CREATE PROCEDURE pa_tipoparentesco_delete(
	IN _tparent_id int(11)
)
BEGIN
	UPDATE tipoparentesco
	SET tparent_estado = 0
	WHERE tparent_id = _tparent_id;
END
$$

CREATE PROCEDURE pa_tipoparentesco_getByID(
	IN _tparent_id int(11)
)
BEGIN
	SELECT tparent_id, tparent_nombre, tparent_estado
	FROM tipoparentesco tparent
	WHERE tparent.tparent_id = _tparent_id;
END
$$

CREATE PROCEDURE pa_tipoparentesco_getRow(
	IN _tparent_id int(11)
)
BEGIN
	SELECT tparent_id, tparent_nombre, tparent_estado
	FROM tipoparentesco tparent
	WHERE tparent.tparent_id = _tparent_id;
END
$$

CREATE PROCEDURE pa_tipoparentesco_insert(
	OUT _tparent_id int(11),
	IN _tparent_nombre varchar(50)
)
BEGIN
	INSERT INTO tipoparentesco (
		tparent_nombre,
		tparent_estado
	)
	VALUES (
		_tparent_nombre,
		1
	);
	SET _tparent_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_tipoparentesco_list(
	IN _buscar varchar(50),
	IN _tparent_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT tparent_id, tparent_nombre, tparent_estado
	FROM tipoparentesco tparent
	WHERE tparent.tparent_estado = _tparent_estado
	  AND (tparent.tparent_nombre LIKE _buscar);
END
$$

CREATE PROCEDURE pa_tipoparentesco_listcbo(
	IN _tparent_id int(11)
)
BEGIN
	SELECT tparent_id, tparent_nombre, tparent_estado
	FROM tipoparentesco tparent
	WHERE tparent.tparent_estado = 1 OR (tparent.tparent_id = _tparent_id);
END
$$

CREATE PROCEDURE pa_tipoparentesco_update(
	IN _tparent_id int(11),
	IN _tparent_nombre varchar(50)
)
BEGIN
	UPDATE tipoparentesco
	SET tparent_nombre = _tparent_nombre
	WHERE tparent_id = _tparent_id;
END
$$

CREATE PROCEDURE pa_triaje_activate(
	IN _triaje_id int(11)
)
BEGIN
	UPDATE triaje
	SET triaje_estado = 1
	WHERE triaje_id = _triaje_id;
END
$$

CREATE PROCEDURE pa_triaje_delete(
	IN _triaje_id int(11)
)
BEGIN
	UPDATE triaje
	SET triaje_estado = 0
	WHERE triaje_id = _triaje_id;
END
$$

CREATE PROCEDURE pa_triaje_getByID(
	IN _triaje_id int(11)
)
BEGIN
	SELECT triaje_id, atenc_id, var_id, var_nombre, um_id, um_nombre, um_abrev, triaje_valor,
		   triaje_fecha_reg, triaje_estado
	FROM triaje triaje
		INNER JOIN atencion atenc ON triaje.triaje_atenc_id = atenc.atenc_id
		INNER JOIN um um ON triaje.triaje_um_id = um.um_id
		INNER JOIN variable var ON triaje.triaje_var_id = var.var_id
	WHERE triaje.triaje_id = _triaje_id;
END
$$

CREATE PROCEDURE pa_triaje_getRow(
	IN _triaje_id int(11)
)
BEGIN
	SELECT triaje_id, atenc_id, var_id, var_nombre, um_id, um_nombre, um_abrev, triaje_valor,
		   triaje_fecha_reg, triaje_estado
	FROM triaje triaje
		INNER JOIN atencion atenc ON triaje.triaje_atenc_id = atenc.atenc_id
		INNER JOIN um um ON triaje.triaje_um_id = um.um_id
		INNER JOIN variable var ON triaje.triaje_var_id = var.var_id
	WHERE triaje.triaje_id = _triaje_id;
END
$$

CREATE PROCEDURE pa_triaje_insert(
	OUT _triaje_id int(11),
	IN _triaje_atenc_id int(11),
	IN _triaje_var_id int(11),
	IN _triaje_um_id int(11),
	IN _triaje_valor decimal(9, 2)
)
BEGIN
	INSERT INTO triaje (
		triaje_atenc_id,
		triaje_var_id,
		triaje_um_id,
		triaje_valor,
		triaje_fecha_reg,
		triaje_estado
	)
	VALUES (
		_triaje_atenc_id,
		_triaje_var_id,
		_triaje_um_id,
		_triaje_valor,
		NOW(),
		1
	);
	SET _triaje_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_triaje_list(
	IN _buscar varchar(50),
	IN _triaje_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT triaje_id, atenc_id, var_id, var_nombre, um_id, um_nombre, um_abrev, triaje_valor,
		   triaje_fecha_reg, triaje_estado
	FROM triaje triaje
		INNER JOIN atencion atenc ON triaje.triaje_atenc_id = atenc.atenc_id
		INNER JOIN um um ON triaje.triaje_um_id = um.um_id
		INNER JOIN variable var ON triaje.triaje_var_id = var.var_id
	WHERE triaje.triaje_estado = _triaje_estado
	  AND (triaje.triaje_valor LIKE _buscar);
END
$$

CREATE PROCEDURE pa_triaje_listcbo(
	IN _triaje_id int(11)
)
BEGIN
	SELECT triaje_id, atenc_id, var_id, var_nombre, um_id, um_nombre, um_abrev, triaje_valor,
		   triaje_fecha_reg, triaje_estado
	FROM triaje triaje
		INNER JOIN atencion atenc ON triaje.triaje_atenc_id = atenc.atenc_id
		INNER JOIN um um ON triaje.triaje_um_id = um.um_id
		INNER JOIN variable var ON triaje.triaje_var_id = var.var_id
	WHERE triaje.triaje_estado = 1 OR (triaje.triaje_id = _triaje_id);
END
$$

CREATE PROCEDURE pa_triaje_update(
	IN _triaje_id int(11),
	IN _triaje_atenc_id int(11),
	IN _triaje_var_id int(11),
	IN _triaje_um_id int(11),
	IN _triaje_valor decimal(9, 2)
)
BEGIN
	UPDATE triaje
	SET triaje_atenc_id = _triaje_atenc_id,
		triaje_var_id = _triaje_var_id,
		triaje_um_id = _triaje_um_id,
		triaje_valor = _triaje_valor
	WHERE triaje_id = _triaje_id;
END
$$

CREATE PROCEDURE pa_ubigeo_activate(
	IN _ubig_id int(11)
)
BEGIN
	UPDATE ubigeo
	SET ubig_estado = 1
	WHERE ubig_id = _ubig_id;
END
$$

CREATE PROCEDURE pa_ubigeo_delete(
	IN _ubig_id int(11)
)
BEGIN
	UPDATE ubigeo
	SET ubig_estado = 0
	WHERE ubig_id = _ubig_id;
END
$$

CREATE PROCEDURE pa_ubigeo_getByID(
	IN _ubig_id int(11)
)
BEGIN
	SELECT ubig_id, ubig_cod, ubig_dpto_cod, ubig_prov_cod, ubig_dist_cod, ubig_nombre,
		   ubig_estado
	FROM ubigeo ubig
	WHERE ubig.ubig_id = _ubig_id;
END
$$

CREATE PROCEDURE pa_ubigeo_getRow(
	IN _ubig_id int(11)
)
BEGIN
	SELECT ubig_id, ubig_cod, ubig_dpto_cod, ubig_prov_cod, ubig_dist_cod, ubig_nombre,
		   ubig_estado
	FROM ubigeo ubig
	WHERE ubig.ubig_id = _ubig_id;
END
$$

CREATE PROCEDURE pa_ubigeo_insert(
	OUT _ubig_id int(11),
	IN _ubig_cod char(6),
	IN _ubig_dpto_cod int(11),
	IN _ubig_prov_cod int(11),
	IN _ubig_dist_cod int(11),
	IN _ubig_nombre varchar(100)
)
BEGIN
	INSERT INTO ubigeo (
		ubig_cod,
		ubig_dpto_cod,
		ubig_prov_cod,
		ubig_dist_cod,
		ubig_nombre,
		ubig_estado
	)
	VALUES (
		_ubig_cod,
		_ubig_dpto_cod,
		_ubig_prov_cod,
		_ubig_dist_cod,
		_ubig_nombre,
		1
	);
	SET _ubig_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_ubigeo_list(
	IN _buscar varchar(50),
	IN _ubig_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT ubig_id, ubig_cod, ubig_dpto_cod, ubig_prov_cod, ubig_dist_cod, ubig_nombre,
		   ubig_estado
	FROM ubigeo ubig
	WHERE ubig.ubig_estado = _ubig_estado
	  AND (ubig.ubig_nombre LIKE _buscar);
END
$$

CREATE PROCEDURE pa_ubigeo_listcbo(
	IN _ubig_id int(11)
)
BEGIN
	SELECT ubig_id, ubig_cod, ubig_dpto_cod, ubig_prov_cod, ubig_dist_cod, ubig_nombre,
		   ubig_estado
	FROM ubigeo ubig
	WHERE ubig.ubig_estado = 1 OR (ubig.ubig_id = _ubig_id);
END
$$

CREATE PROCEDURE pa_ubigeo_update(
	IN _ubig_id int(11),
	IN _ubig_cod char(6),
	IN _ubig_dpto_cod int(11),
	IN _ubig_prov_cod int(11),
	IN _ubig_dist_cod int(11),
	IN _ubig_nombre varchar(100)
)
BEGIN
	UPDATE ubigeo
	SET ubig_cod = _ubig_cod,
		ubig_dpto_cod = _ubig_dpto_cod,
		ubig_prov_cod = _ubig_prov_cod,
		ubig_dist_cod = _ubig_dist_cod,
		ubig_nombre = _ubig_nombre
	WHERE ubig_id = _ubig_id;
END
$$

CREATE PROCEDURE pa_um_activate(
	IN _um_id int(11)
)
BEGIN
	UPDATE um
	SET um_estado = 1
	WHERE um_id = _um_id;
END
$$

CREATE PROCEDURE pa_um_delete(
	IN _um_id int(11)
)
BEGIN
	UPDATE um
	SET um_estado = 0
	WHERE um_id = _um_id;
END
$$

CREATE PROCEDURE pa_um_getByID(
	IN _um_id int(11)
)
BEGIN
	SELECT um_id, um_nombre, um_abrev, um_estado
	FROM um um
	WHERE um.um_id = _um_id;
END
$$

CREATE PROCEDURE pa_um_getRow(
	IN _um_id int(11)
)
BEGIN
	SELECT um_id, um_nombre, um_abrev, um_estado
	FROM um um
	WHERE um.um_id = _um_id;
END
$$

CREATE PROCEDURE pa_um_insert(
	OUT _um_id int(11),
	IN _um_nombre varchar(50),
	IN _um_abrev varchar(10)
)
BEGIN
	INSERT INTO um (
		um_nombre,
		um_abrev,
		um_estado
	)
	VALUES (
		_um_nombre,
		_um_abrev,
		1
	);
	SET _um_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_um_list(
	IN _buscar varchar(50),
	IN _um_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT um_id, um_nombre, um_abrev, um_estado
	FROM um um
	WHERE um.um_estado = _um_estado
	  AND (um.um_nombre LIKE _buscar
		OR um.um_abrev LIKE _buscar);
END
$$

CREATE PROCEDURE pa_um_listcbo(
	IN _um_id int(11)
)
BEGIN
	SELECT um_id, um_nombre, um_abrev, um_estado
	FROM um um
	WHERE um.um_estado = 1 OR (um.um_id = _um_id);
END
$$

CREATE PROCEDURE pa_um_update(
	IN _um_id int(11),
	IN _um_nombre varchar(50),
	IN _um_abrev varchar(10)
)
BEGIN
	UPDATE um
	SET um_nombre = _um_nombre,
		um_abrev = _um_abrev
	WHERE um_id = _um_id;
END
$$

CREATE PROCEDURE pa_usuario_activate(
	IN _usu_id int(11)
)
BEGIN
	UPDATE usuario
	SET usu_estado = 1
	WHERE usu_id = _usu_id;
END
$$

CREATE PROCEDURE pa_usuario_delete(
	IN _usu_id int(11)
)
BEGIN
	UPDATE usuario
	SET usu_estado = 0
	WHERE usu_id = _usu_id;
END
$$

CREATE PROCEDURE pa_usuario_getByID(
	IN _usu_id int(11)
)
BEGIN
	SELECT usu_id, usu_nombre, empl_id, rol_id, rol_nombre, usu_fecha_reg, usu_estado
	FROM usuario usu
		INNER JOIN empleado empl ON usu.usu_empl_id = empl.empl_id
		INNER JOIN rol rol ON usu.usu_rol_id = rol.rol_id
	WHERE usu.usu_id = _usu_id;
END
$$

CREATE PROCEDURE pa_usuario_insert(
	OUT _usu_id int(11),
	IN _usu_nombre varchar(20),
	IN _usu_contrasena varchar(32),
	IN _usu_empl_id int(11),
	IN _usu_rol_id int(11)
)
BEGIN
	INSERT INTO usuario (
		usu_nombre,
		usu_contrasena,
		usu_empl_id,
		usu_rol_id,
		usu_fecha_reg,
		usu_estado
	)
	VALUES (
		_usu_nombre,
		_usu_contrasena,
		_usu_empl_id,
		_usu_rol_id,
		NOW(),
		1
	);
	SET _usu_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_usuario_list(
	IN _buscar varchar(50),
	IN _usu_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT usu_id, usu_nombre, empl_id, rol_id, rol_nombre, usu_fecha_reg, usu_estado,
	       pers_nombre, pers_ap_paterno, pers_ap_materno
	FROM usuario usu
		INNER JOIN empleado empl ON usu.usu_empl_id = empl.empl_id
	    INNER JOIN persona pers ON empl.empl_pers_id = pers.pers_id
		INNER JOIN rol rol ON usu.usu_rol_id = rol.rol_id
	WHERE usu.usu_estado in (1, 2)
	  AND (usu.usu_nombre LIKE _buscar
	    OR pers.pers_nombre LIKE  _buscar
        OR pers.pers_ap_paterno LIKE  _buscar
        OR pers.pers_ap_materno LIKE  _buscar
	  );
END
$$

CREATE PROCEDURE pa_usuario_listcbo(
	IN _usu_id int(11)
)
BEGIN
	SELECT usu_id, usu_nombre, empl_id, rol_id, rol_nombre, usu_fecha_reg, usu_estado
	FROM usuario usu
		INNER JOIN empleado empl ON usu.usu_empl_id = empl.empl_id
		INNER JOIN rol rol ON usu.usu_rol_id = rol.rol_id
	WHERE usu.usu_estado = 1 OR (usu.usu_id = _usu_id);
END
$$

CREATE PROCEDURE pa_usuario_login(
    IN _usu_nombre varchar(20),
    IN _usu_contrasena varchar(32)
)
BEGIN
    SELECT usu_id, usu_nombre, empl_id, pers_id, pers_nombre, pers_ap_paterno, pers_ap_materno,
           rol_id, rol_nombre, usu_fecha_reg, usu_estado
    FROM usuario usu
        INNER JOIN empleado empl ON usu.usu_empl_id = empl.empl_id
        INNER JOIN persona pers ON empl.empl_pers_id = pers.pers_id
        INNER JOIN rol rol ON usu.usu_rol_id = rol.rol_id
    WHERE usu.usu_nombre = _usu_nombre AND usu_contrasena = _usu_contrasena;
END
$$

CREATE PROCEDURE pa_usuario_update(
	IN _usu_id int(11),
	IN _usu_nombre varchar(20),
	IN _usu_contrasena varchar(32),
	IN _usu_empl_id int(11),
	IN _usu_rol_id int(11)
)
BEGIN
	UPDATE usuario
	SET usu_nombre = _usu_nombre,
		usu_contrasena = _usu_contrasena,
		usu_empl_id = _usu_empl_id,
		usu_rol_id = _usu_rol_id
	WHERE usu_id = _usu_id;
END
$$

CREATE PROCEDURE pa_variable_activate(
	IN _var_id int(11)
)
BEGIN
	UPDATE variable
	SET var_estado = 1
	WHERE var_id = _var_id;
END
$$

CREATE PROCEDURE pa_variable_delete(
	IN _var_id int(11)
)
BEGIN
	UPDATE variable
	SET var_estado = 0
	WHERE var_id = _var_id;
END
$$

CREATE PROCEDURE pa_variable_getByID(
	IN _var_id int(11)
)
BEGIN
	SELECT var_id, catvar_id, catvar_nombre, var_nombre, um_id, um_nombre, um_abrev, var_tipo_var,
		   var_estado
	FROM variable var
		INNER JOIN categvariable catvar ON var.var_catvar_id = catvar.catvar_id
		INNER JOIN um um ON var.var_um_id = um.um_id
	WHERE var.var_id = _var_id;
END
$$

CREATE PROCEDURE pa_variable_getRow(
	IN _var_id int(11)
)
BEGIN
	SELECT var_id, catvar_id, catvar_nombre, var_nombre, um_id, um_nombre, um_abrev, var_tipo_var,
		   var_estado
	FROM variable var
		INNER JOIN categvariable catvar ON var.var_catvar_id = catvar.catvar_id
		INNER JOIN um um ON var.var_um_id = um.um_id
	WHERE var.var_id = _var_id;
END
$$

CREATE PROCEDURE pa_variable_insert(
	OUT _var_id int(11),
	IN _var_catvar_id int(11),
	IN _var_nombre varchar(50),
	IN _var_um_id int(11),
	IN _var_tipo_var char(1)
)
BEGIN
	INSERT INTO variable (
		var_catvar_id,
		var_nombre,
		var_um_id,
		var_tipo_var,
		var_estado
	)
	VALUES (
		_var_catvar_id,
		_var_nombre,
		_var_um_id,
		_var_tipo_var,
		1
	);
	SET _var_id = LAST_INSERT_ID();
END
$$

CREATE PROCEDURE pa_variable_list(
	IN _buscar varchar(50),
	IN _var_estado tinyint(4) unsigned
)
BEGIN
	SET @aux = _buscar;
	SET _buscar = IF(_buscar <> '', concat('%', replace(_buscar, ' ', '%'), '%'), '%');

	SELECT var_id, catvar_id, catvar_nombre, var_nombre, um_id, um_nombre, um_abrev, var_tipo_var,
		   var_estado
	FROM variable var
		INNER JOIN categvariable catvar ON var.var_catvar_id = catvar.catvar_id
		INNER JOIN um um ON var.var_um_id = um.um_id
	WHERE var.var_estado = _var_estado
	  AND (var.var_nombre LIKE _buscar);
END
$$

CREATE PROCEDURE pa_variable_listcbo(
	IN _var_id int(11)
)
BEGIN
	SELECT var_id, catvar_id, catvar_nombre, var_nombre, um_id, um_nombre, um_abrev, var_tipo_var,
		   var_estado
	FROM variable var
		INNER JOIN categvariable catvar ON var.var_catvar_id = catvar.catvar_id
		INNER JOIN um um ON var.var_um_id = um.um_id
	WHERE var.var_estado = 1 OR (var.var_id = _var_id);
END
$$

CREATE PROCEDURE pa_variable_update(
	IN _var_id int(11),
	IN _var_catvar_id int(11),
	IN _var_nombre varchar(50),
	IN _var_um_id int(11),
	IN _var_tipo_var char(1)
)
BEGIN
	UPDATE variable
	SET var_catvar_id = _var_catvar_id,
		var_nombre = _var_nombre,
		var_um_id = _var_um_id,
		var_tipo_var = _var_tipo_var
	WHERE var_id = _var_id;
END
$$

CREATE FUNCTION fn_calcular_promedio_valor_triaje(_pac_id int, _var_id int)
  RETURNS decimal(10,0)
  DETERMINISTIC
BEGIN
    DECLARE valor_prom decimal;

    SET valor_prom = (
        SELECT avg(triaje_valor) as valor_prom
        FROM triaje
            INNER JOIN atencion ON triaje.triaje_atenc_id = atencion.atenc_id
        WHERE atenc_pac_id = _pac_id AND triaje_var_id = _var_id
    );

    RETURN valor_prom;
END
$$

DELIMITER ;

CREATE 
VIEW v_atenciones
AS
	select `atenc`.`atenc_id` AS `atenc_id`,`atenc`.`atenc_fecha_atenc` AS `atenc_fecha_atenc`,`atenc`.`atenc_pac_id` AS `atenc_pac_id`,`pers1`.`pers_id` AS `pac_id`,`pers1`.`pers_nombre` AS `pac_nombre`,`pers1`.`pers_snombre` AS `pac_snombre`,`pers1`.`pers_ap_paterno` AS `pac_ap_paterno`,`pers1`.`pers_ap_materno` AS `pac_ap_materno`,`pers1`.`pers_tdi_id` AS `pac_tdi_id`,`pers1`.`pers_tdi_nro` AS `pac_tdi_nro`,`pers2`.`pers_id` AS `medic_id`,`pers2`.`pers_nombre` AS `medic_nombre`,`pers2`.`pers_snombre` AS `medic_snombre`,`pers2`.`pers_ap_paterno` AS `medic_ap_paterno`,`pers2`.`pers_ap_materno` AS `medic_ap_materno`,`pers2`.`pers_tdi_id` AS `medic_tdi_id`,`pers2`.`pers_tdi_nro` AS `medic_tdi_nro`,`atenc`.`atenc_observacion` AS `atenc_observacion`,`atenc`.`atenc_tratamiento` AS `atenc_tratamiento`,`atenc`.`atenc_dieta` AS `atenc_dieta`,`atenc`.`atenc_situacion` AS `atenc_situacion`,`atenc`.`atenc_estado` AS `atenc_estado`,`espec`.`espec_id` AS `espec_id`,`espec`.`espec_nombre` AS `espec_nombre` from (((((`atencion` `atenc` join `paciente` `pac` on((`atenc`.`atenc_pac_id` = `pac`.`pac_id`))) join `persona` `pers1` on((`pac`.`pac_pers_id` = `pers1`.`pers_id`))) join `empleado` `empl` on((`atenc`.`atenc_medico_id` = `empl`.`empl_id`))) join `persona` `pers2` on((`empl`.`empl_pers_id` = `pers2`.`pers_id`))) join `especialidad` `espec` on((`atenc`.`atenc_espec_id` = `espec`.`espec_id`)));

CREATE 
VIEW v_direcciones
AS
	select `pers`.`pers_id` AS `pers_id`,`pers`.`pers_nombre` AS `pers_nombre`,`pers`.`pers_snombre` AS `pers_snombre`,`pers`.`pers_ap_paterno` AS `pers_ap_paterno`,`pers`.`pers_ap_materno` AS `pers_ap_materno`,`pers`.`pers_tdi_id` AS `pers_tdi_id`,`pers`.`pers_tdi_nro` AS `pers_tdi_nro`,`u`.`ubig_cod` AS `ubig_cod`,`u`.`ubig_nombre` AS `ubig_nombre`,`d`.`direc_descripcion` AS `direc_descripcion` from ((`persona` `pers` join `direccion` `d` on((`pers`.`pers_id` = `d`.`direc_pers_id`))) join `ubigeo` `u` on((`d`.`direc_ubig_id` = `u`.`ubig_id`)));

CREATE 
VIEW v_empleados
AS
	select `pers`.`pers_id` AS `empl_id`,`pers`.`pers_nombre` AS `empl_nombre`,`pers`.`pers_snombre` AS `empl_snombre`,`pers`.`pers_ap_paterno` AS `empl_ap_paterno`,`pers`.`pers_ap_materno` AS `empl_ap_materno`,`pers`.`pers_tdi_id` AS `empl_tdi_id`,`pers`.`pers_tdi_nro` AS `empl_tdi_nro`,`carg`.`carg_id` AS `carg_id`,`carg`.`carg_nombre` AS `carg_nombre` from ((`empleado` `empl` join `persona` `pers` on((`empl`.`empl_pers_id` = `pers`.`pers_id`))) join `cargo` `carg` on((`empl`.`empl_carg_id` = `carg`.`carg_id`)));

CREATE 
VIEW v_familiares
AS
	select `pac`.`pers_id` AS `pac_id`,`pac`.`pers_nombre` AS `pac_nombre`,`pac`.`pers_snombre` AS `pac_snombre`,`pac`.`pers_ap_paterno` AS `pac_ap_paterno`,`pac`.`pers_ap_materno` AS `pac_ap_materno`,`pac`.`pers_tdi_id` AS `pac_tdi_id`,`pac`.`pers_tdi_nro` AS `pac_tdi_nro`,`fam`.`pers_id` AS `fam_id`,`fam`.`pers_nombre` AS `fam_nombre`,`fam`.`pers_snombre` AS `fam_snombre`,`fam`.`pers_ap_paterno` AS `fam_ap_paterno`,`fam`.`pers_ap_materno` AS `fam_ap_materno`,`fam`.`pers_tdi_id` AS `fam_tdi_id`,`fam`.`pers_tdi_nro` AS `fam_tdi_nro`,`t`.`tparent_id` AS `tparent_id`,`t`.`tparent_nombre` AS `tparent_nombre` from (((`parentesco` `p` join `persona` `pac` on((`p`.`parent_pers1_id` = `pac`.`pers_id`))) join `persona` `fam` on((`p`.`parent_pers2_id` = `fam`.`pers_id`))) join `tipoparentesco` `t` on((`p`.`parent_tparent_id` = `t`.`tparent_id`)));

CREATE 
VIEW v_triaje_pacientes
AS
	select `pers`.`pers_id` AS `pac_id`,`pers`.`pers_nombre` AS `pac_nombre`,`pers`.`pers_snombre` AS `pac_snombre`,`pers`.`pers_ap_paterno` AS `pac_ap_paterno`,`pers`.`pers_ap_materno` AS `pac_ap_materno`,`atenc`.`atenc_id` AS `atenc_id`,`atenc`.`atenc_fecha_atenc` AS `atenc_fecha_atenc`,`tri`.`triaje_id` AS `triaje_id`,`var`.`var_id` AS `var_id`,`var`.`var_nombre` AS `var_nombre`,`tri`.`triaje_valor` AS `triaje_valor`,`u`.`um_id` AS `um_id`,`u`.`um_nombre` AS `um_nombre`,`u`.`um_abrev` AS `um_abrev` from (((((`paciente` `pac` join `persona` `pers` on((`pac`.`pac_pers_id` = `pers`.`pers_id`))) join `atencion` `atenc` on((`pac`.`pac_id` = `atenc`.`atenc_pac_id`))) join `triaje` `tri` on((`atenc`.`atenc_id` = `tri`.`triaje_atenc_id`))) join `variable` `var` on((`tri`.`triaje_var_id` = `var`.`var_id`))) join `um` `u` on((`tri`.`triaje_um_id` = `u`.`um_id`)));

INSERT INTO cargo VALUES
(1, 'Director', 1),
(2, 'Medico', 1);

INSERT INTO categvariable VALUES
(1, 'Antropométricas', 1),
(2, 'Físicas', 1),
(3, 'Clínicas', 1);


-- Table desnutricion.diagnostico does not contain any data (it is empty)


-- Table desnutricion.especialidad does not contain any data (it is empty)


-- Table desnutricion.indicador does not contain any data (it is empty)

INSERT INTO rol VALUES
(1, 'Administrador', '2019-11-07 01:29:28', 1);

INSERT INTO tipodocident VALUES
(1, 'Documento Nacional de Identidad', 'DNI', 1),
(2, 'Registro Unico del Contribuyente', 'RUC', 1),
(3, 'Carnet de Extranjería', 'CARNET EXT', 1);

INSERT INTO tipoparentesco VALUES
(1, 'Padre', 1),
(2, 'Madre', 1),
(3, 'Tío', 1);


-- Table desnutricion.ubigeo does not contain any data (it is empty)


-- Table desnutricion.um does not contain any data (it is empty)


-- Table desnutricion.percentil does not contain any data (it is empty)

INSERT INTO persona VALUES
(1, 'Carlos', 'Alfredo', 'Zarabia', 'Vega', 1, '354654654', 'M', '2000-11-07 01:27:14', 'c@hotmail.com', '978897987', '578798', 1),
(2, 'SOFIA DEL PILAR', '', 'BARDALES', 'VILCHEZ', 1, '70185645', 'F', '2005-01-01 00:00:00', '', '', '', 1),
(3, 'DADILA BRIGITTE', '', 'FLORES', 'SAMILLAN', 1, '70180457', 'F', '2005-08-04 00:00:00', 'dadila@hotmail.com', '', '', 1);


-- Table desnutricion.reglas does not contain any data (it is empty)


-- Table desnutricion.variable does not contain any data (it is empty)


-- Table desnutricion.direccion does not contain any data (it is empty)

INSERT INTO empleado VALUES
(1, 1, 1, '2019-11-07 01:29:02', 1),
(2, 2, 1, '2019-11-07 16:33:44', 1);

INSERT INTO paciente VALUES
(1, 2, '2019-11-07 13:33:00', 1),
(2, 3, '2019-11-07 16:25:32', 1);


-- Table desnutricion.parentesco does not contain any data (it is empty)


-- Table desnutricion.atencion does not contain any data (it is empty)


-- Table desnutricion.historiaclinica does not contain any data (it is empty)

INSERT INTO usuario VALUES
(1, 'admin', '123', 1, 1, '2019-11-07 01:29:51', 1),
(2, 'admin2', '123', 2, 1, '2019-11-07 16:35:39', 2);


-- Table desnutricion.resultado does not contain any data (it is empty)


-- Table desnutricion.triaje does not contain any data (it is empty)

DELIMITER $$

CREATE TRIGGER trg_atencion_beforeInsert
	BEFORE INSERT
	ON atencion
	FOR EACH ROW
BEGIN
	IF NOT new.atenc_pac_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo paciente ID';
	END IF;
	IF NOT new.atenc_medico_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo medico ID';
	END IF;
	IF NOT new.atenc_espec_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo especialidad ID';
	END IF;
	IF NOT DAYNAME(new.atenc_fecha_atenc) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha atención debe ser una fecha válida';
	END IF;
#   IF NOT length(trim(new.atenc_observacion)) > 0 THEN
#    	SIGNAL SQLSTATE '45000'
#    	SET MESSAGE_TEXT = 'El campo observación no debe estar en blanco';
#   END IF;
#   IF NOT length(trim(new.atenc_tratamiento)) > 0 THEN
#    	SIGNAL SQLSTATE '45000'
#    	SET MESSAGE_TEXT = 'El campo tratamiento no debe estar en blanco';
#   END IF;
#   IF NOT length(trim(new.atenc_dieta)) > 0 THEN
#    	SIGNAL SQLSTATE '45000'
#    	SET MESSAGE_TEXT = 'El campo dieta no debe estar en blanco';
#   END IF;
	IF NOT new.atenc_situacion > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo situación debe ser mayor a cero';
	END IF;
	IF NOT new.atenc_situacion IN (1, 2) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La situacion de la atención solo puede contener los valores 1, 2';
	END IF;
	IF NOT new.atenc_registra_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese el código del usuario que registra los datos';
	END IF;
	IF NOT DAYNAME(new.atenc_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
	IF NOT new.atenc_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor o igual a cero';
	END IF;
	IF NOT new.atenc_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la atención solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_atencion_beforeUpdate
	BEFORE UPDATE
	ON atencion
	FOR EACH ROW
BEGIN
    IF NOT new.atenc_pac_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo paciente ID';
    END IF;
    IF NOT new.atenc_medico_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo medico ID';
    END IF;
    IF NOT new.atenc_espec_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo especialidad ID';
    END IF;
    IF NOT DAYNAME(new.atenc_fecha_atenc) IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de fecha atención debe ser una fecha válida';
    END IF;
#     IF NOT length(trim(new.atenc_observacion)) > 0 THEN
# 		SIGNAL SQLSTATE '45000'
# 		SET MESSAGE_TEXT = 'El campo observación no debe estar en blanco';
#     END IF;
#     IF NOT length(trim(new.atenc_tratamiento)) > 0 THEN
# 		SIGNAL SQLSTATE '45000'
# 		SET MESSAGE_TEXT = 'El campo tratamiento no debe estar en blanco';
#     END IF;
#     IF NOT length(trim(new.atenc_dieta)) > 0 THEN
# 		SIGNAL SQLSTATE '45000'
# 		SET MESSAGE_TEXT = 'El campo dieta no debe estar en blanco';
#     END IF;
    IF NOT new.atenc_situacion > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo situación debe ser mayor a cero';
    END IF;
    IF NOT new.atenc_situacion IN (1, 2) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'La situacion de la atención solo puede contener los valores 1, 2';
    END IF;
    IF NOT new.atenc_registra_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese el código del usuario que registra los datos';
    END IF;
    IF NOT DAYNAME(new.atenc_fecha_reg) IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
    END IF;
    IF NOT new.atenc_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor o igual a cero';
    END IF;
    IF NOT new.atenc_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado de la atención solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_cargo_beforeInsert
	BEFORE INSERT
	ON cargo
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.carg_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo nombre no debe estar en blanco';
	END IF;
	IF NOT new.carg_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo nombre solo debe contener letraz A-Z';
	END IF;
	IF NOT new.carg_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor o igual a cero';
	END IF;
	IF NOT new.carg_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del cargo solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_cargo_beforeUpdate
	BEFORE UPDATE
	ON cargo
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.carg_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo nombre no debe estar en blanco';
    END IF;
    IF NOT new.carg_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo nombre solo debe contener letraz A-Z';
    END IF;
    IF NOT new.carg_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor o igual a cero';
    END IF;
    IF NOT new.carg_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado del cargo solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_categvariable_beforeInsert
	BEFORE INSERT
	ON categvariable
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.catvar_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre de la categoría de variable no debe estar en blanco';
	END IF;
	IF NOT new.catvar_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre de la categoría de variable solo puede contener letras A-Z';
    END IF;
	IF NOT new.catvar_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor o igual a cero';
	END IF;
	IF NOT new.catvar_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la categoría de variable solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_categvariable_beforeUpdate
	BEFORE UPDATE
	ON categvariable
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.catvar_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre de la categoría de variable no debe estar en blanco';
    END IF;
    IF NOT new.catvar_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre de la categoría de variable solo puede contener letras A-Z';
    END IF;
    IF NOT new.catvar_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor o igual a cero';
    END IF;
    IF NOT new.catvar_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado de la categoría de variable solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_diagnostico_beforeInsert
	BEFORE INSERT
	ON diagnostico
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.diag_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo nombre no debe estar en blanco';
	END IF;
	IF NOT length(trim(new.diag_tratamiento_sug)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo tratamiento sugerido no debe estar en blanco';
	END IF;
	IF NOT length(trim(new.diag_dieta_sug)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo dieta sugerida no debe estar en blanco';
	END IF;
	IF NOT new.diag_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor o igual a cero';
	END IF;
	IF NOT new.diag_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del diagnóstico solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_diagnostico_beforeUpdate
	BEFORE UPDATE
	ON diagnostico
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.diag_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El campo nombre no debe estar en blanco';
    END IF;
    IF NOT length(trim(new.diag_tratamiento_sug)) > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El campo tratamiento sugerido no debe estar en blanco';
    END IF;
    IF NOT length(trim(new.diag_dieta_sug)) > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El campo dieta sugerida no debe estar en blanco';
    END IF;
    IF NOT new.diag_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El campo estado debe ser mayor o igual a cero';
    END IF;
    IF NOT new.diag_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El estado del diagnóstico solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_direccion_beforeInsert
	BEFORE INSERT
	ON direccion
	FOR EACH ROW
BEGIN
	IF NOT new.direc_pers_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persona ID';
	END IF;
	IF NOT new.direc_ubig_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo ubigeo ID';
	END IF;
	IF NOT length(trim(new.direc_descripcion)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La descripción de la dirección no debe estar en blanco';
	END IF;
	IF NOT DAYNAME(new.direc_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha reg debe ser una fecha válida';
	END IF;
	IF NOT new.direc_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.direc_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la dirección solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_direccion_beforeUpdate
	BEFORE UPDATE
	ON direccion
	FOR EACH ROW
BEGIN
	IF NOT new.direc_pers_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persona ID';
	END IF;
	IF NOT new.direc_ubig_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo ubigeo ID';
	END IF;
	IF NOT length(trim(new.direc_descripcion)) > 0 THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'La descripción de la dirección no debe estar en blanco';
	END IF;
	IF NOT DAYNAME(new.direc_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha reg debe ser una fecha válida';
	END IF;
	IF NOT new.direc_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.direc_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la dirección solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_empleado_beforeInsert
	BEFORE INSERT
	ON empleado
	FOR EACH ROW
BEGIN
	IF NOT new.empl_pers_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persona ID';
	END IF;
	IF NOT new.empl_carg_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo cargo ID';
	END IF;
	IF NOT DAYNAME(new.empl_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
	IF NOT new.empl_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.empl_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del empleado solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_empleado_beforeUpdate
	BEFORE UPDATE
	ON empleado
	FOR EACH ROW
BEGIN
	IF NOT new.empl_pers_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persona ID';
	END IF;
	IF NOT new.empl_carg_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo cargo ID';
	END IF;
	IF NOT DAYNAME(new.empl_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
	IF NOT new.empl_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.empl_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del empleado solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_especialidad_beforeInsert
	BEFORE INSERT
	ON especialidad
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.espec_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre de la especialidad no debe estar en blanco';
	END IF;
    IF NOT new.espec_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre de la especialidad solo puede contener letras';
    END IF;
	IF NOT new.espec_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.espec_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la especialidad solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_especialidad_beforeUpdate
	BEFORE UPDATE
	ON especialidad
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.espec_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre de la especialidad no debe estar en blanco';
    END IF;
    IF NOT new.espec_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre de la especialidad solo puede contener letras';
    END IF;
    IF NOT new.espec_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.espec_estado IN (0, 1)  THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado de la especialidad solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_historiaclinica_beforeInsert
	BEFORE INSERT
	ON historiaclinica
	FOR EACH ROW
BEGIN
	IF NOT new.hc_pac_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo paciente ID';
	END IF;
	IF NOT DAYNAME(new.hc_fecha_suceso) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha suceso debe ser una fecha válida';
	END IF;
    IF NOT hc_fecha_suceso <= NOW() THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El valor de fecha suceso no puede ser mayor a la fecha de hoy';
    END IF;
	IF NOT length(trim(new.hc_comentario)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo comentario no debe estar en blanco';
	END IF;
	IF NOT new.hc_atenc_id_ref > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo atencion ID referencial debe ser mayor a cero';
	END IF;
	IF NOT DAYNAME(new.hc_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
	IF NOT new.hc_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.hc_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la historia clínica solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_historiaclinica_beforeUpdate
	BEFORE UPDATE
	ON historiaclinica
	FOR EACH ROW
BEGIN
    IF NOT new.hc_pac_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo paciente ID';
    END IF;
    IF NOT DAYNAME(new.hc_fecha_suceso) IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de fecha suceso debe ser una fecha válida';
    END IF;
    IF NOT hc_fecha_suceso <= NOW() THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de fecha suceso no puede ser mayor a la fecha de hoy';
    END IF;
    IF NOT length(trim(new.hc_comentario)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo comentario no debe estar en blanco';
    END IF;
    IF NOT new.hc_atenc_id_ref > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo atencion ID referencial debe ser mayor a cero';
    END IF;
    IF NOT DAYNAME(new.hc_fecha_reg) IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
    END IF;
    IF NOT new.hc_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.hc_estado IN (0, 1)  THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado de la historia clínica solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_indicador_beforeInsert
	BEFORE INSERT
	ON indicador
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.indic_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo nombre del indicador no debe estar en blanco';
	END IF;
	IF NOT new.indic_var1_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo var1 ID debe ser mayor a cero';
	END IF;
	IF NOT new.indic_var2_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo var2 ID debe ser mayor a cero';
	END IF;
	IF NOT new.indic_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.indic_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del indicador solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_indicador_beforeUpdate
	BEFORE UPDATE
	ON indicador
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.indic_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo nombre del indicador no debe estar en blanco';
	END IF;
	IF NOT new.indic_var1_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo var1 ID debe ser mayor a cero';
	END IF;
	IF NOT new.indic_var2_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo var2 ID debe ser mayor a cero';
	END IF;
	IF NOT new.indic_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.indic_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del indicador solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_paciente_beforeInsert
	BEFORE INSERT
	ON paciente
	FOR EACH ROW
BEGIN
	IF NOT new.pac_pers_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persona ID';
	END IF;
	IF NOT DAYNAME(new.pac_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
	IF NOT new.pac_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.pac_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del paciente solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_paciente_beforeUpdate
	BEFORE UPDATE
	ON paciente
	FOR EACH ROW
BEGIN
	IF NOT new.pac_pers_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persona ID';
	END IF;
	IF NOT DAYNAME(new.pac_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
	IF NOT new.pac_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.pac_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del paciente solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_parentesco_afterInsert
	AFTER INSERT
	ON parentesco
	FOR EACH ROW
BEGIN
    IF(NEW.parent_es_apoderado = 1) THEN
        UPDATE parentesco
        SET parent_es_apoderado = 0
        WHERE parent_pers1_id = NEW.parent_pers1_id AND parent_id <> NEW.parent_id;
    END IF;
END
$$

CREATE TRIGGER trg_parentesco_afterUpdate
	AFTER UPDATE
	ON parentesco
	FOR EACH ROW
BEGIN
    IF(NEW.parent_es_apoderado = 1) THEN
        UPDATE parentesco
        SET parent_es_apoderado = 0
        WHERE parent_pers1_id = NEW.parent_pers1_id AND parent_id <> NEW.parent_id;
    END IF;
END
$$

CREATE TRIGGER trg_parentesco_beforeInsert
	BEFORE INSERT
	ON parentesco
	FOR EACH ROW
BEGIN
	IF NOT new.parent_pers1_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persono 1 ID';
	END IF;
	IF NOT new.parent_pers2_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persona 2 ID';
	END IF;
	IF NOT new.parent_tparent_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo tipo de parentesco ID';
	END IF;
	IF NOT new.parent_es_apoderado > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo apoderado debe ser mayor a cero';
	END IF;
	IF NOT new.parent_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.parent_estado IN (0, 1)  THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del parentesco solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_parentesco_beforeUpdate
	BEFORE UPDATE
	ON parentesco
	FOR EACH ROW
BEGIN
    IF NOT new.parent_pers1_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persono 1 ID';
    END IF;
    IF NOT new.parent_pers2_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo persona 2 ID';
    END IF;
    IF NOT new.parent_tparent_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo tipo de parentesco ID';
    END IF;
    IF NOT new.parent_es_apoderado > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo apoderado debe ser mayor a cero';
    END IF;
    IF NOT new.parent_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.parent_estado IN (0, 1)  THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado del parentesco solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_percentil_beforeInsert
	BEFORE INSERT
	ON percentil
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.percent_sexo)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo sexo no debe estar en blanco';
	END IF;
	IF NOT new.percent_sexo IN ('M', 'F') THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El sexo del percentil solo puede contener los valores M, F';
	END IF;
	IF NOT new.percent_indic_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo indicador ID';
	END IF;
	IF NOT new.percent_var1_valor > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de la variable 1 debe ser mayor cero';
	END IF;
	IF NOT new.percent_var2_valor > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de la variable 2 debe ser mayor cero';
	END IF;
	IF NOT new.percent_percentil > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo percentil debe ser mayor cero';
	END IF;
	IF NOT new.percent_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.percent_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del percentil solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_percentil_beforeUpdate
	BEFORE UPDATE
	ON percentil
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.percent_sexo)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo sexo no debe estar en blanco';
    END IF;
    IF NOT new.percent_sexo IN ('M', 'F') THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El sexo del percentil solo puede contener los valores M, F';
    END IF;
    IF NOT new.percent_indic_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo indicador ID';
    END IF;
    IF NOT new.percent_var1_valor > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de la variable 1 debe ser mayor cero';
    END IF;
    IF NOT new.percent_var2_valor > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de la variable 2 debe ser mayor cero';
    END IF;
    IF NOT new.percent_percentil > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo percentil debe ser mayor cero';
    END IF;
    IF NOT new.percent_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.percent_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado del percentil solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_persona_beforeInsert
	BEFORE INSERT
	ON persona
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.pers_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo nombre no debe estar en blanco';
	END IF;
	IF NOT new.pers_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre solo puede contener letras';
	END IF;
# 	IF NOT length(trim(new.pers_snombre)) > 0 THEN
# 		SIGNAL SQLSTATE '45000'
# 		SET MESSAGE_TEXT = 'El snombre no debe estar en blanco';
# 	END IF;
	IF (length(trim(new.pers_snombre)) > 0 AND NOT new.pers_snombre REGEXP '^[[:alpha:]_ ]+$') THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El segundo nombre solo puede contener letras';
	END IF;
	IF NOT length(trim(new.pers_ap_paterno)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo apellido paterno no debe estar en blanco';
	END IF;
	IF NOT new.pers_ap_paterno REGEXP '^[[:alpha:]_ ]+$' THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El apellido paterno solo puede contener letras';
	END IF;
	IF NOT length(trim(new.pers_ap_materno)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo apellido materno no debe estar en blanco';
	END IF;
	IF NOT new.pers_ap_materno REGEXP '^[[:alpha:]_ ]+$' THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El apellido materno solo puede contener letras';
	END IF;
	IF NOT new.pers_tdi_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un tipo de documento de identidad';
	END IF;
	IF NOT length(trim(new.pers_tdi_nro)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El número de documento de identidad no debe estar en blanco';
	END IF;
	IF NOT length(trim(new.pers_sexo)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El sexo no debe estar en blanco';
	END IF;
	IF NOT new.pers_sexo IN ('M', 'F') THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El sexo de la persona solo puede contener los valores M, F';
	END IF;
	IF NOT (DAYNAME(new.pers_fecha_nac) IS NOT NULL AND DATE(new.pers_fecha_nac) < DATE(NOW())) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha nacimiento debe ser una fecha válida y menor a la fecha de hoy';
	END IF;
	IF length(trim(new.pers_email)) > 0 AND NOT new.pers_email REGEXP '^[A-Z0-9._]+@[A-Z0-9]+.[A-Z]{2,4}$' THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese una dirección de correo electrónico válida';
	END IF;
# 	IF NOT length(trim(new.pers_celular)) > 0 THEN
# 		SIGNAL SQLSTATE '45000'
# 		SET MESSAGE_TEXT = 'El campo celular no debe estar en blanco';
# 	END IF;
# 	IF NOT length(trim(new.pers_telefono)) > 0 THEN
# 		SIGNAL SQLSTATE '45000'
# 		SET MESSAGE_TEXT = 'El campo telefono no debe estar en blanco';
# 	END IF;
	IF NOT new.pers_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.pers_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la persona solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_persona_beforeUpdate
	BEFORE UPDATE
	ON persona
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.pers_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo nombre no debe estar en blanco';
    END IF;
    IF NOT new.pers_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre solo puede contener letras';
    END IF;
    # 	IF NOT length(trim(new.pers_snombre)) > 0 THEN
# 		SIGNAL SQLSTATE '45000'
# 		SET MESSAGE_TEXT = 'El snombre no debe estar en blanco';
# 	END IF;
    IF (length(trim(new.pers_snombre)) > 0 AND NOT new.pers_snombre REGEXP '^[[:alpha:]_ ]+$') THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El segundo nombre solo puede contener letras';
    END IF;
    IF NOT length(trim(new.pers_ap_paterno)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo apellido paterno no debe estar en blanco';
    END IF;
    IF NOT new.pers_ap_paterno REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El apellido paterno solo puede contener letras';
    END IF;
    IF NOT length(trim(new.pers_ap_materno)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo apellido materno no debe estar en blanco';
    END IF;
    IF NOT new.pers_ap_materno REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El apellido materno solo puede contener letras';
    END IF;
    IF NOT new.pers_tdi_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un tipo de documento de identidad';
    END IF;
    IF NOT length(trim(new.pers_tdi_nro)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El número de documento de identidad no debe estar en blanco';
    END IF;
    IF NOT length(trim(new.pers_sexo)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El sexo no debe estar en blanco';
    END IF;
    IF NOT new.pers_sexo IN ('M', 'F') THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El sexo de la persona solo puede contener los valores M, F';
    END IF;
   IF NOT (DAYNAME(new.pers_fecha_nac) IS NOT NULL AND DATE(new.pers_fecha_nac) < DATE(NOW())) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha nacimiento debe ser una fecha válida y menor a la fecha de hoy';
	END IF;    
    IF length(trim(new.pers_email)) > 0 AND NOT new.pers_email REGEXP '^[A-Z0-9._]+@[A-Z0-9]+.[A-Z]{2,4}$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese una dirección de correo electrónico válida';
    END IF;
    # 	IF NOT length(trim(new.pers_celular)) > 0 THEN
# 		SIGNAL SQLSTATE '45000'
# 		SET MESSAGE_TEXT = 'El campo celular no debe estar en blanco';
# 	END IF;
# 	IF NOT length(trim(new.pers_telefono)) > 0 THEN
# 		SIGNAL SQLSTATE '45000'
# 		SET MESSAGE_TEXT = 'El campo telefono no debe estar en blanco';
# 	END IF;
    IF NOT new.pers_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.pers_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado de la persona solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_reglas_beforeInsert
	BEFORE INSERT
	ON reglas
	FOR EACH ROW
BEGIN
	IF NOT new.regla_indic1_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo indicador 1 ID';
	END IF;
	IF NOT new.regla_indic2_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo indicador 2 ID';
	END IF;
	IF NOT length(trim(new.regla_formula)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo formula no debe estar en blanco';
	END IF;
	IF NOT new.regla_diag_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo diagnostico ID';
	END IF;
END
$$

CREATE TRIGGER trg_reglas_beforeUpdate
	BEFORE UPDATE
	ON reglas
	FOR EACH ROW
BEGIN
    IF NOT new.regla_indic1_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo indicador 1 ID';
    END IF;
    IF NOT new.regla_indic2_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo indicador 2 ID';
    END IF;
    IF NOT length(trim(new.regla_formula)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo formula no debe estar en blanco';
    END IF;
    IF NOT new.regla_diag_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo diagnostico ID';
    END IF;
END
$$

CREATE TRIGGER trg_resultado_beforeInsert
	BEFORE INSERT
	ON resultado
	FOR EACH ROW
BEGIN
	IF NOT new.result_atenc_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo atencion ID';
	END IF;
	IF NOT new.result_diag_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo diagnostico ID';
	END IF;
	IF NOT DAYNAME(new.result_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
END
$$

CREATE TRIGGER trg_resultado_beforeUpdate
	BEFORE UPDATE
	ON resultado
	FOR EACH ROW
BEGIN
	IF NOT new.result_atenc_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo atencion ID';
	END IF;
	IF NOT new.result_diag_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo diagnostico ID';
	END IF;
	IF NOT DAYNAME(new.result_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
END
$$

CREATE TRIGGER trg_rol_beforeInsert
	BEFORE INSERT
	ON rol
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.rol_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre del rol no debe estar en blanco';
	END IF;
    IF NOT new.rol_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del rol solo puede contener letras';
    END IF;
	IF NOT DAYNAME(new.rol_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
	IF NOT new.rol_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.rol_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del rol solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_rol_beforeUpdate
	BEFORE UPDATE
	ON rol
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.rol_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del rol no debe estar en blanco';
    END IF;
    IF NOT new.rol_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del rol solo puede contener letras';
    END IF;
    IF NOT DAYNAME(new.rol_fecha_reg) IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
    END IF;
    IF NOT new.rol_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.rol_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado del rol solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_tipodocident_beforeInsert
	BEFORE INSERT
	ON tipodocident
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.tdi_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre del tipo de documento de identidad no debe estar en blanco';
	END IF;
    IF NOT new.tdi_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del tipo de documento de identidad solo puede contener letras';
    END IF;
	IF NOT length(trim(new.tdi_abrev)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La abreviatura del tipo de documento de identidad no debe estar en blanco';
	END IF;
    IF NOT new.tdi_abrev REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'La abreviatura del tipo de documento de identidad solo puede contener letras';
    END IF;
	IF NOT new.tdi_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.tdi_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del tipo documento de identidad solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_tipodocident_beforeUpdate
	BEFORE UPDATE
	ON tipodocident
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.tdi_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del tipo de documento de identidad no debe estar en blanco';
    END IF;
    IF NOT new.tdi_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del tipo de documento de identidad solo puede contener letras';
    END IF;
    IF NOT length(trim(new.tdi_abrev)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'La abreviatura del tipo de documento de identidad no debe estar en blanco';
    END IF;
    IF NOT new.tdi_abrev REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'La abreviatura del tipo de documento de identidad solo puede contener letras';
    END IF;
    IF NOT new.tdi_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.tdi_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado del tipo documento de identidad solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_tipoparentesco_beforeInsert
	BEFORE INSERT
	ON tipoparentesco
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.tparent_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre del tipo de parentesco no debe estar en blanco';
	END IF;
    IF NOT new.tparent_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del tipo de parentesco solo puede contener letras';
    END IF;
	IF NOT new.tparent_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.tparent_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del tipo de parentesco solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_tipoparentesco_beforeUpdate
	BEFORE UPDATE
	ON tipoparentesco
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.tparent_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del tipo de parentesco no debe estar en blanco';
    END IF;
    IF NOT new.tparent_nombre REGEXP '^[[:alpha:]_ ]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del tipo de parentesco solo puede contener letras';
    END IF;
    IF NOT new.tparent_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.tparent_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado del tipo de parentesco solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_triaje_beforeInsert
	BEFORE INSERT
	ON triaje
	FOR EACH ROW
BEGIN
    -- verifica la consistencia del campo [triaje_um_id]
    DECLARE var_um_id int;
    SET var_um_id = (
        SELECT var_um_id FROM variable WHERE var_id = new.triaje_var_id
    );
    SET new.triaje_um_id = var_um_id;

    -- checks
	IF NOT new.triaje_atenc_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo atencion ID';
	END IF;
	IF NOT new.triaje_var_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo variable ID';
	END IF;
	IF NOT new.triaje_um_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese una unidad de medida';
	END IF;
	IF NOT new.triaje_valor > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo valor debe ser mayor cero';
	END IF;
	IF NOT DAYNAME(new.triaje_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
	IF NOT new.triaje_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.triaje_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del triaje solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_triaje_beforeUpdate
	BEFORE UPDATE
	ON triaje
	FOR EACH ROW
BEGIN
    -- verifica la consistencia del campo [triaje_um_id]
    DECLARE var_um_id int;
    SET var_um_id = (
        SELECT var_um_id FROM variable WHERE var_id = new.triaje_var_id
        );
    SET new.triaje_um_id = var_um_id;

    -- checks
    IF NOT new.triaje_atenc_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo atencion ID';
    END IF;
    IF NOT new.triaje_var_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo variable ID';
    END IF;
    IF NOT new.triaje_um_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese una unidad de medida';
    END IF;
    IF NOT new.triaje_valor > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo valor debe ser mayor cero';
    END IF;
    IF NOT DAYNAME(new.triaje_fecha_reg) IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
    END IF;
    IF NOT new.triaje_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.triaje_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado del triaje solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_ubigeo_beforeInsert
	BEFORE INSERT
	ON ubigeo
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.ubig_cod)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo codigo de ubigeo no debe estar en blanco';
	END IF;
    IF NOT length(trim(new.ubig_cod)) = 6 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo codigo de ubigeo debe contener 6 dígitos';
    END IF;
    IF NOT new.ubig_cod REGEXP '^[0-9]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo codigo de ubigeo solo debe contener dígitos';
    END IF;
	IF NOT new.ubig_dpto_cod > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo codigo del departamento debe ser mayor a cero';
	END IF;
	IF NOT new.ubig_prov_cod > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo codigo de la provincia debe ser mayor a cero';
	END IF;
	IF NOT new.ubig_dist_cod > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo codigo del distrito debe ser mayor a cero';
	END IF;
	IF NOT length(trim(new.ubig_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre no debe estar en blanco';
	END IF;
	IF NOT new.ubig_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.ubig_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la ubicación geográfica solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_ubigeo_beforeUpdate
	BEFORE UPDATE
	ON ubigeo
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.ubig_cod)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo codigo de ubigeo no debe estar en blanco';
    END IF;
    IF NOT length(trim(new.ubig_cod)) = 6 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo codigo de ubigeo debe contener 6 dígitos';
    END IF;
    IF NOT new.ubig_cod REGEXP '^[0-9]+$' THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo codigo de ubigeo solo debe contener dígitos';
    END IF;
    IF NOT new.ubig_dpto_cod > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo codigo del departamento debe ser mayor a cero';
    END IF;
    IF NOT new.ubig_prov_cod > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo codigo de la provincia debe ser mayor a cero';
    END IF;
    IF NOT new.ubig_dist_cod > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo codigo del distrito debe ser mayor a cero';
    END IF;
    IF NOT length(trim(new.ubig_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre no debe estar en blanco';
    END IF;
    IF NOT new.ubig_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.ubig_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado de la ubicación geográfica solo puede contener los valores 0, 1';
    END IF;
END
$$

CREATE TRIGGER trg_um_beforeInsert
	BEFORE INSERT
	ON um
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.um_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo nombre no debe estar en blanco';
	END IF;
	IF NOT length(trim(new.um_abrev)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo abrev no debe estar en blanco';
	END IF;
	IF NOT new.um_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.um_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la unidad de medida solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_um_beforeUpdate
	BEFORE UPDATE
	ON um
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.um_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo nombre no debe estar en blanco';
	END IF;
	IF NOT length(trim(new.um_abrev)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo abrev no debe estar en blanco';
	END IF;
	IF NOT new.um_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.um_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la unidad de medida solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_usuario_beforeInsert
	BEFORE INSERT
	ON usuario
	FOR EACH ROW
BEGIN
	IF NOT length(trim(new.usu_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre del usuario no debe estar en blanco';
	END IF;
	IF NOT length(trim(new.usu_contrasena)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'La contraseña no debe estar en blanco';
	END IF;
	IF NOT new.usu_empl_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo empleado ID';
	END IF;
	IF NOT new.usu_rol_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo rol ID';
	END IF;
	IF NOT DAYNAME(new.usu_fecha_reg) IS NOT NULL THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
	END IF;
	IF NOT new.usu_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.usu_estado IN (0, 1, 2) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado del usuario solo puede contener los valores 0, 1, 2';
	END IF;
END
$$

CREATE TRIGGER trg_usuario_beforeUpdate
	BEFORE UPDATE
	ON usuario
	FOR EACH ROW
BEGIN
    IF NOT length(trim(new.usu_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre del usuario no debe estar en blanco';
    END IF;
    IF NOT length(trim(new.usu_contrasena)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'La contraseña no debe estar en blanco';
    END IF;
    IF NOT new.usu_empl_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo empleado ID';
    END IF;
    IF NOT new.usu_rol_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo rol ID';
    END IF;
    IF NOT DAYNAME(new.usu_fecha_reg) IS NOT NULL THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El valor de fecha registro debe ser una fecha válida';
    END IF;
    IF NOT new.usu_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.usu_estado IN (0, 1, 2) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado del usuario solo puede contener los valores 0, 1, 2';
    END IF;
END
$$

CREATE TRIGGER trg_variable_beforeInsert
	BEFORE INSERT
	ON variable
	FOR EACH ROW
BEGIN
	IF NOT new.var_catvar_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo categvariable ID';
	END IF;
	IF NOT length(trim(new.var_nombre)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El nombre de la variable no debe estar en blanco';
	END IF;
	IF NOT new.var_um_id > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo um ID';
	END IF;
	IF NOT length(trim(new.var_tipo_var)) > 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El tipo de variable no debe estar en blanco';
	END IF;
    IF NOT new.var_tipo_var IN (1, 2) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El tipo de variable solo puede contener los valores 1, 2';
    END IF;
	IF NOT new.var_estado >= 0 THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
	END IF;
	IF NOT new.var_estado IN (0, 1) THEN
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'El estado de la variable solo puede contener los valores 0, 1';
	END IF;
END
$$

CREATE TRIGGER trg_variable_beforeUpdate
	BEFORE UPDATE
	ON variable
	FOR EACH ROW
BEGIN
    IF NOT new.var_catvar_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo categvariable ID';
    END IF;
    IF NOT length(trim(new.var_nombre)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El nombre de la variable no debe estar en blanco';
    END IF;
    IF NOT new.var_um_id > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Ingrese un valor válido para el campo um ID';
    END IF;
    IF NOT length(trim(new.var_tipo_var)) > 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El tipo de variable no debe estar en blanco';
    END IF;
    IF NOT new.var_tipo_var IN (1, 2) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El tipo de variable solo puede contener los valores 1, 2';
    END IF;
    IF NOT new.var_estado >= 0 THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El campo estado debe ser mayor igual a cero';
    END IF;
    IF NOT new.var_estado IN (0, 1) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'El estado de la variable solo puede contener los valores 0, 1';
    END IF;
END
$$

DELIMITER ;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;